================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-12-21T02:17:22.380Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
configs/
  charts-config.js
  index.js
context/
  index.jsx
data/
  authors-table-data.js
  conversations-data.js
  index.js
  orders-overview-data.js
  platform-settings-data.js
  projects-data.js
  projects-table-data.js
  statistics-cards-data.js
  statistics-charts-data.js
helper/
  AudienceSelector.jsx
layouts/
  about.jsx
  auth.jsx
  dashboard.jsx
  index.js
pages/
  auth/
    index.js
    sign-in.jsx
    sign-up.jsx
  dashboard/
    audience.jsx
    home.jsx
    index.js
    newsletter.jsx
    notifications.jsx
    overview.jsx
    profile.jsx
    search.jsx
    subscribers.jsx
services/
  dbFormat.js
  ErrorBoundary.jsx
  initFollowers.js
  initUsers.js
  wm.js
utils/
  ProtectedRoute.jsx
widgets/
  cards/
    index.js
    message-card.jsx
    profile-info-card.jsx
    statistics-card.jsx
  charts/
    index.js
    statistics-chart.jsx
  layout/
    configurator.jsx
    dashboard-navbar.jsx
    footer.jsx
    index.js
    navbar.jsx
    sidenav.jsx
App.jsx
main.jsx
routes.jsx

================================================================
Repository Files
================================================================

================
File: configs/charts-config.js
================
export const chartsConfig = {
  chart: {
    toolbar: {
      show: false,
    },
  },
  title: {
    show: "",
  },
  dataLabels: {
    enabled: false,
  },
  xaxis: {
    axisTicks: {
      show: false,
    },
    axisBorder: {
      show: false,
    },
    labels: {
      style: {
        colors: "#37474f",
        fontSize: "13px",
        fontFamily: "inherit",
        fontWeight: 300,
      },
    },
  },
  yaxis: {
    labels: {
      style: {
        colors: "#37474f",
        fontSize: "13px",
        fontFamily: "inherit",
        fontWeight: 300,
      },
    },
  },
  grid: {
    show: true,
    borderColor: "#dddddd",
    strokeDashArray: 5,
    xaxis: {
      lines: {
        show: true,
      },
    },
    padding: {
      top: 5,
      right: 20,
    },
  },
  fill: {
    opacity: 0.8,
  },
  tooltip: {
    theme: "dark",
  },
};

export default chartsConfig;

================
File: configs/index.js
================
export * from "@/configs/charts-config";

================
File: context/index.jsx
================
import React from "react";
import PropTypes from "prop-types";

export const MaterialTailwind = React.createContext(null);
MaterialTailwind.displayName = "MaterialTailwindContext";

export function reducer(state, action) {
  switch (action.type) {
    case "OPEN_SIDENAV": {
      return { ...state, openSidenav: action.value };
    }
    case "SIDENAV_TYPE": {
      return { ...state, sidenavType: action.value };
    }
    case "SIDENAV_COLOR": {
      return { ...state, sidenavColor: action.value };
    }
    case "TRANSPARENT_NAVBAR": {
      return { ...state, transparentNavbar: action.value };
    }
    case "FIXED_NAVBAR": {
      return { ...state, fixedNavbar: action.value };
    }
    case "OPEN_CONFIGURATOR": {
      return { ...state, openConfigurator: action.value };
    }
    default: {
      throw new Error(`Unhandled action type: ${action.type}`);
    }
  }
}

export function MaterialTailwindControllerProvider({ children }) {
  const initialState = {
    openSidenav: false,
    sidenavColor: "dark",
    sidenavType: "white",
    transparentNavbar: true,
    fixedNavbar: false,
    openConfigurator: false,
  };

  const [controller, dispatch] = React.useReducer(reducer, initialState);
  const value = React.useMemo(
    () => [controller, dispatch],
    [controller, dispatch]
  );

  return (
    <MaterialTailwind.Provider value={value}>
      {children}
    </MaterialTailwind.Provider>
  );
}

export function useMaterialTailwindController() {
  const context = React.useContext(MaterialTailwind);

  if (!context) {
    throw new Error(
      "useMaterialTailwindController should be used inside the MaterialTailwindControllerProvider."
    );
  }

  return context;
}

MaterialTailwindControllerProvider.displayName = "/src/context/index.jsx";

MaterialTailwindControllerProvider.propTypes = {
  children: PropTypes.node.isRequired,
};

export const setOpenSidenav = (dispatch, value) =>
  dispatch({ type: "OPEN_SIDENAV", value });
export const setSidenavType = (dispatch, value) =>
  dispatch({ type: "SIDENAV_TYPE", value });
export const setSidenavColor = (dispatch, value) =>
  dispatch({ type: "SIDENAV_COLOR", value });
export const setTransparentNavbar = (dispatch, value) =>
  dispatch({ type: "TRANSPARENT_NAVBAR", value });
export const setFixedNavbar = (dispatch, value) =>
  dispatch({ type: "FIXED_NAVBAR", value });
export const setOpenConfigurator = (dispatch, value) =>
  dispatch({ type: "OPEN_CONFIGURATOR", value });

================
File: data/authors-table-data.js
================
export const authorsTableData = [
  {
    img: "/img/team-2.jpeg",
    name: "John Michael",
    email: "john@creative-tim.com",
    job: ["Manager", "Organization"],
    online: true,
    date: "23/04/18",
  },
  {
    img: "/img/team-1.jpeg",
    name: "Alexa Liras",
    email: "alexa@creative-tim.com",
    job: ["Programator", "Developer"],
    online: false,
    date: "11/01/19",
  },
  {
    img: "/img/team-4.jpeg",
    name: "Laurent Perrier",
    email: "laurent@creative-tim.com",
    job: ["Executive", "Projects"],
    online: true,
    date: "19/09/17",
  },
  {
    img: "/img/team-3.jpeg",
    name: "Michael Levi",
    email: "michael@creative-tim.com",
    job: ["Programator", "Developer"],
    online: true,
    date: "24/12/08",
  },
  {
    img: "/img/bruce-mars.jpeg",
    name: "Bruce Mars",
    email: "bruce@creative-tim.com",
    job: ["Manager", "Executive"],
    online: false,
    date: "04/10/21",
  },
  {
    img: "/img/team-2.jpeg",
    name: "Alexander",
    email: "alexander@creative-tim.com",
    job: ["Programator", "Developer"],
    online: false,
    date: "14/09/20",
  },
];

export default authorsTableData;

================
File: data/conversations-data.js
================
export const conversationsData = [
  {
    img: "/img/team-1.jpeg",
    name: "Sophie B.",
    message: "Hi! I need more information...",
  },
  {
    img: "/img/team-2.jpeg",
    name: "Alexander",
    message: "Awesome work, can you...",
  },
  {
    img: "/img/team-3.jpeg",
    name: "Ivanna",
    message: "About files I can...",
  },
  {
    img: "/img/team-4.jpeg",
    name: "Peterson",
    message: "Have a great afternoon...",
  },
  {
    img: "/img/bruce-mars.jpeg",
    name: "Bruce Mars",
    message: "Hi! I need more information...",
  },
];

export default conversationsData;

================
File: data/index.js
================
export * from "@/data/statistics-cards-data";
export * from "@/data/statistics-charts-data";
export * from "@/data/projects-table-data";
export * from "@/data/orders-overview-data";
export * from "@/data/platform-settings-data";
export * from "@/data/conversations-data";
export * from "@/data/projects-data";
export * from "@/data/authors-table-data";

================
File: data/orders-overview-data.js
================
import {
  BellIcon,
  PlusCircleIcon,
  ShoppingCartIcon,
  CreditCardIcon,
  LockOpenIcon,
  BanknotesIcon,
} from "@heroicons/react/24/solid";

export const ordersOverviewData = [
  {
    icon: BellIcon,
    color: "text-blue-gray-300",
    title: "$2400, Design changes",
    description: "22 DEC 7:20 PM",
  },
  {
    icon: PlusCircleIcon,
    color: "text-blue-gray-300",
    title: "New order #1832412",
    description: "21 DEC 11 PM",
  },
  {
    icon: ShoppingCartIcon,
    color: "text-blue-gray-300",
    title: "Server payments for April",
    description: "21 DEC 9:34 PM",
  },
  {
    icon: CreditCardIcon,
    color: "text-blue-gray-300",
    title: "New card added for order #4395133",
    description: "20 DEC 2:20 AM",
  },
  {
    icon: LockOpenIcon,
    color: "text-blue-gray-300",
    title: "Unlock packages for development",
    description: "18 DEC 4:54 AM",
  },
  {
    icon: BanknotesIcon,
    color: "text-blue-gray-300",
    title: "New order #9583120",
    description: "17 DEC",
  },
];

export default ordersOverviewData;

================
File: data/platform-settings-data.js
================
export const platformSettingsData = [
  {
    title: "account",
    options: [
      {
        checked: true,
        label: "Email me when someone follows me",
      },
      {
        checked: false,
        label: "Email me when someone answers on my post",
      },
      {
        checked: true,
        label: "Email me when someone mentions me",
      },
    ],
  },
  {
    title: "application",
    options: [
      {
        checked: false,
        label: "New launches and projects",
      },
      {
        checked: true,
        label: "Monthly product updates",
      },
      {
        checked: false,
        label: "Subscribe to newsletter",
      },
    ],
  },
];

export default platformSettingsData;

================
File: data/projects-data.js
================
export const projectsData = [
  {
    img: "/img/home-decor-1.jpeg",
    title: "Modern",
    tag: "Project #1",
    description:
      "As Uber works through a huge amount of internal management turmoil.",
    route: "/dashboard/profile",
    members: [
      { img: "/img/team-1.jpeg", name: "Romina Hadid" },
      { img: "/img/team-2.jpeg", name: "Ryan Tompson" },
      { img: "/img/team-3.jpeg", name: "Jessica Doe" },
      { img: "/img/team-4.jpeg", name: "Alexander Smith" },
    ],
  },
  {
    img: "/img/home-decor-2.jpeg",
    title: "Scandinavian",
    tag: "Project #2",
    description:
      "Music is something that every person has his or her own specific opinion about.",
    route: "/dashboard/profile",
    members: [
      { img: "/img/team-4.jpeg", name: "Alexander Smith" },
      { img: "/img/team-3.jpeg", name: "Jessica Doe" },
      { img: "/img/team-2.jpeg", name: "Ryan Tompson" },
      { img: "/img/team-1.jpeg", name: "Romina Hadid" },
    ],
  },
  {
    img: "/img/home-decor-3.jpeg",
    title: "Minimalist",
    tag: "Project #3",
    description:
      "Different people have different taste, and various types of music.",
    route: "/dashboard/profile",
    members: [
      { img: "/img/team-1.jpeg", name: "Romina Hadid" },
      { img: "/img/team-2.jpeg", name: "Ryan Tompson" },
      { img: "/img/team-3.jpeg", name: "Jessica Doe" },
      { img: "/img/team-4.jpeg", name: "Alexander Smith" },
    ],
  },
  {
    img: "/img/home-decor-4.jpeg",
    title: "Gothic",
    tag: "Project #4",
    description:
      "Why would anyone pick blue over pink? Pink is obviously a better color.",
    route: "/dashboard/profile",
    members: [
      { img: "/img/team-4.jpeg", name: "Alexander Smith" },
      { img: "/img/team-3.jpeg", name: "Jessica Doe" },
      { img: "/img/team-2.jpeg", name: "Ryan Tompson" },
      { img: "/img/team-1.jpeg", name: "Romina Hadid" },
    ],
  },
];

export default projectsData;

================
File: data/projects-table-data.js
================
export const projectsTableData = [
  {
    img: "/img/logo-xd.svg",
    name: "Material XD Version",
    members: [
      { img: "/img/team-1.jpeg", name: "Romina Hadid" },
      { img: "/img/team-2.jpeg", name: "Ryan Tompson" },
      { img: "/img/team-3.jpeg", name: "Jessica Doe" },
      { img: "/img/team-4.jpeg", name: "Alexander Smith" },
    ],
    budget: "$14,000",
    completion: 60,
  },
  {
    img: "/img/logo-atlassian.svg",
    name: "Add Progress Track",
    members: [
      { img: "/img/team-2.jpeg", name: "Ryan Tompson" },
      { img: "/img/team-4.jpeg", name: "Alexander Smith" },
    ],
    budget: "$3,000",
    completion: 10,
  },
  {
    img: "/img/logo-slack.svg",
    name: "Fix Platform Errors",
    members: [
      { img: "/img/team-3.jpeg", name: "Jessica Doe" },
      { img: "/img/team-1.jpeg", name: "Romina Hadid" },
    ],
    budget: "Not set",
    completion: 100,
  },
  {
    img: "/img/logo-spotify.svg",
    name: "Launch our Mobile App",
    members: [
      { img: "/img/team-4.jpeg", name: "Alexander Smith" },
      { img: "/img/team-3.jpeg", name: "Jessica Doe" },
      { img: "/img/team-2.jpeg", name: "Ryan Tompson" },
      { img: "/img/team-1.jpeg", name: "Romina Hadid" },
    ],
    budget: "$20,500",
    completion: 100,
  },
  {
    img: "/img/logo-jira.svg",
    name: "Add the New Pricing Page",
    members: [{ img: "/img/team-4.jpeg", name: "Alexander Smith" }],
    budget: "$500",
    completion: 25,
  },
  {
    img: "/img/logo-invision.svg",
    name: "Redesign New Online Shop",
    members: [
      { img: "/img/team-1.jpeg", name: "Romina Hadid" },
      { img: "/img/team-4.jpeg", name: "Alexander Smith" },
    ],
    budget: "$2,000",
    completion: 40,
  },
];

export default projectsTableData;

================
File: data/statistics-cards-data.js
================
import {
  BanknotesIcon,
  UserPlusIcon,
  UsersIcon,
  ChartBarIcon,
} from "@heroicons/react/24/solid";

export const statisticsCardsData = [
  {
    color: "gray",
    icon: BanknotesIcon,
    title: "Today's Money",
    value: "$53k",
    footer: {
      color: "text-green-500",
      value: "+55%",
      label: "than last week",
    },
  },
  {
    color: "gray",
    icon: UsersIcon,
    title: "Today's Users",
    value: "2,300",
    footer: {
      color: "text-green-500",
      value: "+3%",
      label: "than last month",
    },
  },
  {
    color: "gray",
    icon: UserPlusIcon,
    title: "New Clients",
    value: "3,462",
    footer: {
      color: "text-red-500",
      value: "-2%",
      label: "than yesterday",
    },
  },
  {
    color: "gray",
    icon: ChartBarIcon,
    title: "Sales",
    value: "$103,430",
    footer: {
      color: "text-green-500",
      value: "+5%",
      label: "than yesterday",
    },
  },
];

export default statisticsCardsData;

================
File: data/statistics-charts-data.js
================
import { chartsConfig } from "@/configs";

const websiteViewsChart = {
  type: "bar",
  height: 220,
  series: [
    {
      name: "Views",
      data: [50, 20, 10, 22, 50, 10, 40],
    },
  ],
  options: {
    ...chartsConfig,
    colors: "#388e3c",
    plotOptions: {
      bar: {
        columnWidth: "16%",
        borderRadius: 5,
      },
    },
    xaxis: {
      ...chartsConfig.xaxis,
      categories: ["M", "T", "W", "T", "F", "S", "S"],
    },
  },
};

const dailySalesChart = {
  type: "line",
  height: 220,
  series: [
    {
      name: "Sales",
      data: [50, 40, 300, 320, 500, 350, 200, 230, 500],
    },
  ],
  options: {
    ...chartsConfig,
    colors: ["#0288d1"],
    stroke: {
      lineCap: "round",
    },
    markers: {
      size: 5,
    },
    xaxis: {
      ...chartsConfig.xaxis,
      categories: [
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
      ],
    },
  },
};

const completedTaskChart = {
  type: "line",
  height: 220,
  series: [
    {
      name: "Sales",
      data: [50, 40, 300, 320, 500, 350, 200, 230, 500],
    },
  ],
  options: {
    ...chartsConfig,
    colors: ["#388e3c"],
    stroke: {
      lineCap: "round",
    },
    markers: {
      size: 5,
    },
    xaxis: {
      ...chartsConfig.xaxis,
      categories: [
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
      ],
    },
  },
};
const completedTasksChart = {
  ...completedTaskChart,
  series: [
    {
      name: "Tasks",
      data: [50, 40, 300, 220, 500, 250, 400, 230, 500],
    },
  ],
};

export const statisticsChartsData = [
  {
    color: "white",
    title: "Website View",
    description: "Last Campaign Performance",
    footer: "campaign sent 2 days ago",
    chart: websiteViewsChart,
  },
  {
    color: "white",
    title: "Daily Sales",
    description: "15% increase in today sales",
    footer: "updated 4 min ago",
    chart: dailySalesChart,
  },
  {
    color: "white",
    title: "Completed Tasks",
    description: "Last Campaign Performance",
    footer: "just updated",
    chart: completedTasksChart,
  },
];

export default statisticsChartsData;

================
File: helper/AudienceSelector.jsx
================
import React, { useState } from 'react';
import FolderTree, { testData } from 'react-folder-tree';
import 'react-folder-tree/dist/style.css';

const AudienceSelector = ({ onSelectionChange }) => {
    const [treeState, setTreeState] = useState(testData);

    const onTreeStateChange = (state, event) => {
        setTreeState(state);
        // Optionally, process the selection change
        onSelectionChange(state);
    };

    return (
        <FolderTree
            data={treeState}
            onChange={onTreeStateChange}
        />
    );
};

export default AudienceSelector;

================
File: layouts/about.jsx
================
import { Routes, Route } from "react-router-dom";
import { Cog6ToothIcon } from "@heroicons/react/24/solid";
import { IconButton } from "@material-tailwind/react";
import { Sidenav, DashboardNavbar, Configurator, Footer, } from "@/widgets/layout";
import routes from "@/routes";
import { useMaterialTailwindController, setOpenConfigurator } from "@/context";

export function About() {
    const [controller, dispatch] = useMaterialTailwindController();
    const { sidenavType } = controller;

    return (
        <div className="min-h-screen bg-blue-gray-50/50">
            <Sidenav
                routes={routes}
                brandImg={
                    sidenavType === "dark" ? "/img/logo-ct.png" : "/img/logo-ct-dark.png"
                }
            />
            <div className="p-4 xl:ml-80">
                <DashboardNavbar />
                <Configurator />
                <IconButton
                    size="lg"
                    color="white"
                    className="fixed bottom-8 right-8 z-40 rounded-full shadow-blue-gray-900/10"
                    ripple={false}
                    onClick={() => setOpenConfigurator(dispatch, true)}
                >
                    <Cog6ToothIcon className="h-5 w-5" />
                </IconButton>
                <Routes>
                    {routes.map(
                        ({ layout, pages }) =>
                            layout === "dashboard" &&
                            pages.map(({ path, element }) => (
                                <Route exact path={path} element={element} />
                            ))
                    )}
                </Routes>
                <div className="text-blue-gray-600">
                    <Footer />
                </div>
            </div>
        </div>
    );
}

About.displayName = "/src/layout/about.jsx";

export default About;

================
File: layouts/auth.jsx
================
import { Routes, Route } from "react-router-dom";
import { ChartPieIcon, UserIcon, UserPlusIcon, ArrowRightOnRectangleIcon, } from "@heroicons/react/24/solid";
import routes from "@/routes";

export function Auth() {
  const navbarRoutes = [
    {
      name: "dashboard",
      path: "/dashboard/home",
      icon: ChartPieIcon,
    },
    {
      name: "profile",
      path: "/dashboard/home",
      icon: UserIcon,
    },
    {
      name: "sign up",
      path: "/auth/sign-up",
      icon: UserPlusIcon,
    },
    {
      name: "sign in",
      path: "/auth/sign-in",
      icon: ArrowRightOnRectangleIcon,
    },
  ];

  return (
    <div className="relative min-h-screen w-full">
      <Routes>
        {routes.map(
          ({ layout, pages }) =>
            layout === "auth" &&
            pages.map(({ path, element }) => (
              <Route exact path={path} element={element} />
            ))
        )}
      </Routes>
    </div>
  );
}

Auth.displayName = "/src/layout/Auth.jsx";

export default Auth;

================
File: layouts/dashboard.jsx
================
import { Routes, Route } from "react-router-dom";
import { Cog6ToothIcon } from "@heroicons/react/24/solid";
import { IconButton } from "@material-tailwind/react";
import { Sidenav, DashboardNavbar, Configurator, Footer, } from "@/widgets/layout";
import routes from "@/routes";
import { useMaterialTailwindController, setOpenConfigurator } from "@/context";

export function Dashboard() {
  const [controller, dispatch] = useMaterialTailwindController();
  const { sidenavType } = controller;

  return (
    <div className="min-h-screen bg-blue-gray-50/50">
      <Sidenav
        routes={routes}
        brandImg={
          sidenavType === "dark" ? "/img/logo-ct.png" : "/img/logo-ct-dark.png"
        }
      />
      <div className="p-4 xl:ml-80">
        <DashboardNavbar />
        <Configurator />
        <IconButton
          size="lg"
          color="white"
          className="fixed bottom-8 right-8 z-40 rounded-full shadow-blue-gray-900/10"
          ripple={false}
          onClick={() => setOpenConfigurator(dispatch, true)}
        >
          <Cog6ToothIcon className="h-5 w-5" />
        </IconButton>
        <Routes>
          {routes.map(
            ({ layout, pages }) =>
              layout === "dashboard" &&
              pages.map(({ path, element }) => (
                <Route exact path={path} element={element} />
              ))
          )}
        </Routes>
        <div className="text-blue-gray-600">
          <Footer />
        </div>
      </div>
    </div>
  );
}

Dashboard.displayName = "/src/layout/dashboard.jsx";

export default Dashboard;

================
File: layouts/index.js
================
export * from "@/layouts/dashboard";
export * from "@/layouts/auth";
export * from "@/layouts/about";

================
File: pages/auth/index.js
================
export * from "@/pages/auth/sign-in";
export * from "@/pages/auth/sign-up";

================
File: pages/auth/sign-in.jsx
================
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/700.css";
import React, { useState } from 'react';
import { signInWithEmailAndPassword, signInWithPopup, GoogleAuthProvider } from "firebase/auth";
import { auth } from '../../../firebase-config';
import { useNavigate } from 'react-router-dom';
import { Input, Button, Typography, } from "@material-tailwind/react";
import { Link } from "react-router-dom";

export function SignIn() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSignIn = async (e) => {
    e.preventDefault();
    try {
      await signInWithEmailAndPassword(auth, email, password);
      navigate('/dashboard/home');
    } catch (error) {
      switch (error.code) {
        case 'auth/wrong-password':
          setError('Incorrect password. Please try again.');
          break;
        case 'auth/user-not-found':
          setError('No user found with this email. Please sign up.');
          break;
        case 'auth/user-disabled':
          setError('This account has been disabled. Please contact support.');
          break;
        default:
          setError('Failed to sign in. Please try again later.');
      }
    }
  };

  const handleGoogleSignIn = async () => {
    const provider = new GoogleAuthProvider();
    try {
      await signInWithPopup(auth, provider);
      navigate('/dashboard/home');
    } catch (error) {
      setError(error.message);
    }
  };
  
  return (
    <section className="m-8 flex gap-4">
      <div className="w-full lg:w-3/5 mt-24">
        <div style={{ textAlign: 'center' }}>
          <img
            src="/img/synlogo.jpg"
            alt="Syndicate Logo"
            style={{ width: '50%', height: 'auto', display: 'inline-block', marginLeft: '-20px' }}
            className="mb-4"
          />
          <Typography variant="paragraph" color="blue-gray" className="text-lg font-normal">Enter your email and password to sign in.</Typography>
        </div>
        <form className="mt-8 mb-2 mx-auto w-80 max-w-screen-lg lg:w-1/2" onSubmit={handleSignIn}>
          <div className="mb-1 flex flex-col gap-6">
            <Typography variant="small" color="blue-gray" className="-mb-3 font-medium">
              Your email
            </Typography>
            <Input
              size="lg"
              placeholder="name@mail.com"
              className=" !border-t-blue-gray-200 focus:!border-t-gray-900"
              labelProps={{
                className: "before:content-none after:content-none",
              }}
              value={email} // Set the value of the input to the email state
              onChange={(e) => setEmail(e.target.value)} // Update the email state on input change
            />
            <Typography variant="small" color="blue-gray" className="-mb-3 font-medium">
              Password
            </Typography>
            <Input
              type="password"
              size="lg"
              placeholder="********"
              className=" !border-t-blue-gray-200 focus:!border-t-gray-900"
              labelProps={{
                className: "before:content-none after:content-none",
              }}
              value={password} // Set the value of the input to the password state
              onChange={(e) => setPassword(e.target.value)} // Update the password state on input change
            />
          </div>
          <Button className="mt-6" fullWidth type="submit">
            Sign In
          </Button>

          <div className="space-y-4 mt-8">
            <Button onClick={handleGoogleSignIn} className="mt-6" fullWidth>

              <span>Sign in With Google</span>
            </Button>
          </div>
          <Typography variant="paragraph" className="text-center text-blue-gray-500 font-medium mt-4">
            Not registered?
            <Link to="/auth/sign-up" className="text-gray-900 ml-1">Create account</Link>
          </Typography>
        </form>

      </div>
      <div className="w-2/5 h-full hidden lg:block relative"> {/* Add relative positioning here */}
        <img
          src="/img/pattern.png"
          className="h-full w-full object-cover rounded-3xl"
        />
        <div className="absolute top-0 left-0 right-0 bottom-0 flex items-center justify-center" style={{ width: '75%', margin: '0 auto', fontFamily: 'Roboto, sans-serif' }}>
          <span className="text-white text-xl">
            Syndicate is a private newsletter platform for individuals seeking a more meaningful and private way to communicate with their circles.
            <br /><br />
            Substack enabled content creators to scale their newsletters. Syndicate empowers individuals to deepen their relationships through intentional communication.
          </span>
        </div>
      </div>
      {error && <Typography color="red">{error}</Typography>}
    </section>
  );
}

export default SignIn;

================
File: pages/auth/sign-up.jsx
================
import React, { useState } from 'react';
import { createUserWithEmailAndPassword, signInWithPopup, GoogleAuthProvider } from "firebase/auth";
import { auth } from '../../../firebase-config';
import { useNavigate } from 'react-router-dom';
import { Input, Checkbox, Button, Typography } from "@material-tailwind/react";
import { Link } from "react-router-dom";
import { db } from '../../../firebase-config';
import { doc, setDoc } from 'firebase/firestore';

const generateHash = (userId) => {
  // Define an array of allowed ASCII character codes based on the specified ranges
  const allowedCharCodes = [
    33, ...Array.from({ length: (38 - 35 + 1) }, (_, i) => i + 35),
    ...Array.from({ length: (43 - 42 + 1) }, (_, i) => i + 42),
    45, ...Array.from({ length: (57 - 48 + 1) }, (_, i) => i + 48),
    ...Array.from({ length: (91 - 59 + 1) }, (_, i) => i + 59),
    ...Array.from({ length: (95 - 93 + 1) }, (_, i) => i + 93),
    ...Array.from({ length: (126 - 98 + 1) }, (_, i) => i + 98),
  ];

  let hash = '';
  for (let i = 0; i < 4; i++) {
    // Use the userId to generate an index for the allowedCharCodes array
    const charCode = userId.charCodeAt(i % userId.length);
    const index = charCode % allowedCharCodes.length;
    const hashCharCode = allowedCharCodes[index];
    hash += String.fromCharCode(hashCharCode);
  }
  return hash;
};

export function SignUp() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSignUp = async (e) => {
    e.preventDefault();
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
      const uidPublic = generateHash(user.uid); // Generate the hash for uidPublic

      // Create a user document in Firestore using the UID as the document ID
      await setDoc(doc(db, 'users', user.uid), {
        userId: user.uid,
        name: email.split('@')[0], // Use part of the email as the name or prompt for a real name
        groupId: null,
        uidPublic, // Include the generated hash
      });

      navigate('/dashboard/home');
    } catch (error) {
      switch (error.code) {
        case 'auth/email-already-in-use':
          setError('This email is already in use. Please try another.');
          break;
        case 'auth/invalid-email':
          setError('Invalid email format. Please enter a valid email address.');
          break;
        default:
          setError('Failed to register. Please try again later.');
      }
    }
  };


  const handleGoogleSignUp = async () => {
    const provider = new GoogleAuthProvider();
    try {
      const userCredential = await signInWithPopup(auth, provider);
      const user = userCredential.user;
      const uidPublic = generateHash(user.uid); // Generate the hash for uidPublic

      // Create a user document in Firestore using the UID as the document ID
      await setDoc(doc(db, 'users', user.uid), {
        userId: user.uid,
        name: user.displayName || user.email.split('@')[0], // Use the Google profile name or part of the email
        groupId: null,
        uidPublic, // Include the generated hash
      });

      navigate('/dashboard/home');
    } catch (error) {
      setError(error.message);
    }
  };

  return (
    <section className="m-8 flex">
      <div className="w-2/5 h-full hidden lg:block relative">
        <img
          src="/img/pattern.png"
          className="h-full w-full object-cover rounded-3xl"
        />
        <div className="absolute top-0 left-0 right-0 bottom-0 flex items-center justify-center" style={{ width: '75%', margin: '0 auto', fontFamily: 'Roboto, sans-serif' }}>
          <span className="text-white text-xl">
            Syndicate is a private newsletter platform for individuals seeking a more meaningful and private way to communicate with their circles.
            <br /><br />
            Substack enabled content creators to scale their newsletters. Syndicate empowers individuals to deepen their relationships through intentional communication.
          </span>
        </div>
      </div>
      <div className="w-full lg:w-3/5 flex flex-col items-center justify-center">

        <div className="text-center">
          <Typography variant="h2" className="font-bold mb-4">Join Us Today</Typography>
          <Typography variant="paragraph" color="blue-gray" className="text-lg font-normal">Enter your email and password to register.</Typography>
        </div>
        <form className="mt-8 mb-2 mx-auto w-80 max-w-screen-lg lg:w-1/2" onSubmit={handleSignUp}>
          <div className="mb-1 flex flex-col gap-6">
            <Typography variant="small" color="blue-gray" className="-mb-3 font-medium">
              Your email
            </Typography>
            <Input
              size="lg"
              placeholder="name@mail.com"
              className=" !border-t-blue-gray-200 focus:!border-t-gray-900"
              labelProps={{
                className: "before:content-none after:content-none",
              }}
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
            <Typography variant="small" color="blue-gray" className="-mb-3 font-medium">
              Password
            </Typography>
            <Input
              type="password"
              size="lg"
              placeholder="********"
              className=" !border-t-blue-gray-200 focus:!border-t-gray-900"
              labelProps={{
                className: "before:content-none after:content-none",
              }}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
          <Checkbox
            label={
              <Typography
                variant="small"
                color="gray"
                className="flex items-center justify-start font-medium"
              >
                I agree to the&nbsp;
                <a
                  href="#"
                  className="font-normal text-black transition-colors hover:text-gray-900 underline"
                >
                  Terms and Conditions
                </a>
              </Typography>
            }
            containerProps={{ className: "-ml-2.5" }}
          />
          <Button className="mt-6" fullWidth type="submit">
            Register Now
          </Button>
          <Button onClick={handleGoogleSignUp} className="mt-6" fullWidth>
            Register through Google
          </Button>
          <Typography variant="paragraph" className="text-center text-blue-gray-500 font-medium mt-4">
            Already have an account?
            <Link to="/auth/sign-in" className="text-gray-900 ml-1">Sign in</Link>
          </Typography>
        </form>
      </div>
      {error && <Typography color="red">{error}</Typography>}
    </section>
  );
}

export default SignUp;

================
File: pages/dashboard/audience.jsx
================
import React, { useState } from 'react';
import { useNavigate } from "react-router-dom";

export function Audience() {

    return (
        <div className="mt-12">
            <div className="mb-4 grid grid-cols-1 gap-6 xl:grid-cols-3">
                <Card className="overflow-hidden xl:col-span-3 border border-blue-gray-100 shadow-sm">
                    <CardHeader
                        floated={false}
                        shadow={false}
                        color="transparent"
                        className="m-0 flex items-center justify-between p-6"
                    >
                        <div>
                            <Typography variant="h6" color="blue-gray" className="mb-1">
                                Audience Selection
                            </Typography>
                            <Typography
                                variant="small"
                                className="flex items-center gap-1 font-normal text-blue-gray-600"
                            >
                            </Typography>
                        </div>
                    </CardHeader>
                    <CardBody className="overflow-x-scroll px-0 pt-0 pb-2 flex items-center">
                    </CardBody>
                </Card>
            </div>
        </div>
    );
}

export default Audience;

================
File: pages/dashboard/home.jsx
================
import React, { useState, useEffect } from 'react';
import { db, auth, functions } from '../../../firebase-config';
import { httpsCallable } from 'firebase/functions';
import { collection, query, where, getDocs, doc, getDoc } from 'firebase/firestore';
import { Typography, Card, CardHeader, CardBody, Button, Menu, MenuHandler, MenuList, MenuItem, Avatar } from "@material-tailwind/react";
import { useAuthState } from 'react-firebase-hooks/auth';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css'; // Import styles
import { useNavigate } from 'react-router-dom';
import { EllipsisVerticalIcon, ArrowUpIcon } from "@heroicons/react/24/outline";
import { CheckCircleIcon } from "@heroicons/react/24/solid";
import { ArrowRightIcon as ArrowNarrowRightIcon, ArrowLeftIcon as ArrowNarrowLeftIcon, PaperAirplaneIcon } from '@heroicons/react/24/outline';

export function Home() {
  const [user] = useAuthState(auth);
  const [groups, setGroups] = useState([]);
  const [selectedGroup, setSelectedGroup] = useState('Select a group');
  const [groupMembers, setGroupMembers] = useState([]);
  const queryParams = new URLSearchParams(window.location.search);
  const post = queryParams.get('post');
  const [editorContent, setEditorContent] = useState('');
  const [users, setUsers] = useState([]);

  const [showSuccessMessage, setShowSuccessMessage] = useState(false);
  const navigate = useNavigate();

  const handleSendEmailTemp = async () => {
    // Show success message
    setShowSuccessMessage(true);

    // Wait for 3 seconds
    setTimeout(() => {
      // Hide success message
      setShowSuccessMessage(false);

      // Redirect to the home page
      navigate('/home'); // Update the path if necessary
    }, 1000);
  };

  const handleSendEmail = async () => {
    // Fetch the email addresses of the group members from Firestore
    const memberEmails = await Promise.all(groupMembers.map(async (memberId) => {
      const memberDocRef = doc(db, 'users', memberId);
      const memberDocSnap = await getDoc(memberDocRef);
      return memberDocSnap.exists() ? memberDocSnap.data().email : null;
    }));

    // Filter out any null values
    const validEmails = memberEmails.filter(email => email !== null);

    // Send the email using Firebase (see Step 2 for Firebase setup)
    // This is a placeholder for the Firebase email sending function
    sendEmailToGroupMembers(validEmails, editorContent, user.email);
  };

  // requires Blaze (pay-as-you-go) plan
  const sendEmailToGroupMembers = async (memberEmails, content, senderEmail) => {
    const sendEmailFunction = httpsCallable(functions, 'sendEmailToGroup');
    try {
      await sendEmailFunction({ memberEmails, content, senderEmail });
      console.log('Email sent successfully');
    } catch (error) {
      console.error('Error sending email:', error);
    }
  };

  const ButtonWithIcon = ({ onClick, children, icon }) => {
    return (
      <button
        onClick={onClick}
        className="flex items-center gap-2 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors duration-300"
      >
        {icon === 'left' && <ArrowNarrowLeftIcon className="h-5 w-5" />}
        {children}
        {icon === 'right' && <ArrowNarrowRightIcon className="h-5 w-5" />}
        {icon === 'send' && <PaperAirplaneIcon className="h-5 w-5" />}
      </button>
    );
  };

  useEffect(() => {
    const fetchUsers = async () => {
      const usersCollectionRef = collection(db, 'users');
      const data = await getDocs(usersCollectionRef);
      const usersData = data.docs.map(doc => ({ ...doc.data(), id: doc.id }));
      const filteredUsers = usersData.filter(user => user.uidPublic !== '!zbp');
      setUsers(filteredUsers);
    };

    fetchUsers();
  }, []);

  useEffect(() => {
    const fetchGroups = async () => {
      if (user) {
        try {
          // Query the user document using the logged-in user's email
          const userQuery = query(collection(db, 'users'), where('email', '==', user.email));
          const userQuerySnapshot = await getDocs(userQuery);
          if (!userQuerySnapshot.empty) {
            // Get the user's document ID
            const userDocId = userQuerySnapshot.docs[0].id;
            // Fetch the groups where the userId field matches the user's document ID
            const groupsRef = collection(db, 'groups');
            const groupsQuery = query(groupsRef, where('userId', '==', userDocId));
            const groupsSnapshot = await getDocs(groupsQuery);
            const groupsData = groupsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
          
            setGroups(groupsData);
          } else {
            console.log('No user document found with the email:', user.email);
          }
        } catch (error) {
          console.error("Error fetching groups: ", error);
        }
      }
    };

    fetchGroups();
  }, [user]);

  useEffect(() => {
    const fetchGroupMembers = async () => {
      if (selectedGroup !== 'Select a group') {
        const group = groups.find(g => g.groupName === selectedGroup);
        if (!group) return;
        const membersData = await Promise.all(group.members.map(async (memberId) => {
          const memberDocRef = doc(db, 'users', memberId);
          const memberDocSnap = await getDoc(memberDocRef);
          return memberDocSnap.exists() ? { id: memberDocSnap.id, ...memberDocSnap.data() } : null;
        }));
        setGroupMembers(membersData.filter(member => member !== null));
      }
    };

    fetchGroupMembers();
  }, [selectedGroup, groups]);

  useEffect(() => {
    // Create a style element and append it to the head of the document
    const style = document.createElement('style');
    style.type = 'text/css';
    style.innerHTML = `
      .ql-toolbar.ql-snow {
        position: sticky;
        top: 0;
        z-index: 1000;
        background-color: white;
        border-left: none; /* Removes left border of the toolbar */
        border-right: none; /* Removes right border of the toolbar */
        border-top: 1px solid #ccc; /* Adjust as needed, adds top border to the toolbar */
      }

      .ql-container.ql-snow {
        border: none; /* Removes borders around the editor */
      }

      .ql-editor {
        padding-top: 20px; /* Adds spacing from the top of the editor to the text */
        padding-right: 20px; /* Adds spacing between the text and the vertical scrollbar */
        height: calc(100% - 42px); /* Adjust height to account for the toolbar height */
        overflow-y: auto; /* Enables vertical scrolling */
      }
    `;
    document.head.appendChild(style);

    // Optional: Clean up by removing the style element when the component unmounts
    return () => {
      document.head.removeChild(style);
    };
  }, []); // Empty dependency array ensures this effect runs only once after the initial render

  return (
    <div className="mt-12">
      {post === 'h64YoZvDMb6Khc13j6jn' ? (
        <div className="mb-4 grid grid-cols-1 gap-6 xl:grid-cols-3">
          <Card className="overflow-hidden xl:col-span-2 border border-blue-gray-100 shadow-sm" style={{ height: '600px' }}>
            <CardBody>
              {showSuccessMessage && (
                <div className="text-sm text-green-500 text-right">Sent!</div>
              )}
              <div className="flex justify-between">
                <Button
                  icon="left"
                  color="lightBlue"
                  buttonType="filled"
                  size="regular"
                  rounded={false}
                  block={false}
                  iconOnly={false}
                  ripple="light"
                  className="mt-4 flex items-center"                  onClick={() => navigate('/dashboard/home')}
                >
                  <ArrowNarrowLeftIcon className="h-5 w-5 mr-2" /> Back
                </Button>
                <Button
                  color="lightBlue"
                  buttonType="filled"
                  size="regular"
                  rounded={false}
                  block={false}
                  iconOnly={false}
                  ripple="light"
                  className="mt-4 flex items-center"
                  // onClick={handleSendEmail} // ideally what happens
                  onClick={handleSendEmailTemp}
                >
                  Send to Stanford <ArrowNarrowRightIcon className="h-5 w-5 ml-2" />
                </Button>
              </div>
              <br/>
              <ReactQuill
                theme="snow"
                value={editorContent} 
                onChange={setEditorContent}
                style={{
                  height: '400px', // Set the fixed height for the editor
                  margin: '5px', // Add some space below the editor
                  overflowY: 'auto' // Enable vertical scrolling
                }}
              />
            </CardBody>
          </Card>
        </div>
      ) : (
        <div className="mb-4 grid grid-cols-1 gap-6 xl:grid-cols-3">
          <Card className="overflow-hidden xl:col-span-2 border border-blue-gray-100 shadow-sm" style={{ height: '600px' }}>
            <CardHeader
              floated={false}
              shadow={false}
              color="transparent"
              className="m-0 flex items-center justify-between p-6"
            >
              <div>
                  <Typography variant="h5" className="mb-4">Groups</Typography>
              </div>
            </CardHeader>
              <CardBody className="overflow-x-scroll px-0 pt-0 pb-2">
                <Menu placement="bottom-start">
                  <MenuHandler>
                    <Button size="sm" className="mb-4 ml-6">
                      {selectedGroup}
                    </Button>
                  </MenuHandler>
                  <MenuList>
                    <MenuItem onClick={() => setSelectedGroup('All users')}>all users</MenuItem>
                    {groups.map((group) => (
                      <MenuItem key={group.id} onClick={() => setSelectedGroup(group.groupName)}>
                        {group.groupName}
                      </MenuItem>
                    ))}
                  </MenuList>
                </Menu>
                <Button
                  size="sm"
                  className="mb-4 float-right mr-6 flex items-center"
                  onClick={() => window.location.href = '?post=h64YoZvDMb6Khc13j6jn'}
                >
                  Start Draft <ArrowNarrowRightIcon className="h-5 w-5 ml-2" />
                </Button>
                <table className="w-full min-w-[640px] table-auto">
                  <thead>
                    <tr>
                      {["name"].map(
                        (el) => (
                          <th
                            key={el}
                            className="border-b border-blue-gray-50 py-3 px-6 text-left"
                          >
                            <Typography
                              variant="small"
                              className="text-[11px] font-medium uppercase text-blue-gray-400"
                            >
                              {el}
                            </Typography>
                          </th>
                        )
                      )}
                    </tr>
                  </thead>
                  <tbody>
                    {(selectedGroup === 'All users' ? users : 
                    groupMembers)
                    .filter(member => member.id !== '2F6uNbw9o4hjAzNgy5I3')
                    .map((member, index) => (
                      <tr key={member.id || index}>
                        <td className={`py-3 px-5 ${index === (selectedGroup === 'All users' ? users : groupMembers).length - 1 ? "" : "border-b border-blue-gray-50"}`}>
                          <div className="flex items-center gap-4">
                            <Avatar src={member.photo.replace('syndicate/public', '')} size="sm" />
                            <Typography
                              variant="small"
                              color="blue-gray"
                              className="font-bold"
                            >
                              {member.name}
                            </Typography>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </CardBody>
          </Card>
      </div>
      )}
    </div>
  );
}

export default Home;

================
File: pages/dashboard/index.js
================
export * from "@/pages/dashboard/home";
export * from "@/pages/dashboard/profile";
export * from "@/pages/dashboard/newsletter";
export * from "@/pages/dashboard/audience";
export * from "@/pages/dashboard/subscribers";
export * from "@/pages/dashboard/search";
export * from "@/pages/dashboard/overview";

================
File: pages/dashboard/newsletter.jsx
================
import { ArrowUpIcon, EllipsisVerticalIcon, CheckCircleIcon, ClockIcon, ChatBubbleLeftEllipsisIcon, Cog6ToothIcon, HomeIcon, PencilIcon, UsersIcon, PaperAirplaneIcon } from "@heroicons/react/24/solid";
import React, { useState } from 'react';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import { Avatar, Button, Card, CardBody, CardFooter, CardHeader, Chip, Progress, Switch, Tabs, TabsHeader, Tab, Tooltip, Typography, IconButton, Menu, MenuHandler, MenuList, MenuItem } from "@material-tailwind/react";
import { Link } from "react-router-dom";
import { StatisticsCard, ProfileInfoCard, MessageCard } from "@/widgets/cards";
import { StatisticsChart } from "@/widgets/charts";
import { authorsTableData, platformSettingsData, projectsData, projectsTableData, conversationsData, statisticsCardsData, statisticsChartsData, ordersOverviewData } from "@/data";
import AudienceSelector from '../../helper/AudienceSelector';
import { useNavigate } from "react-router-dom";

export function Newsletter() {
  const [newsletterContent, setNewsletterContent] = useState('');
  const [recipients, setRecipients] = useState([]);
  const [showSelector, setShowSelector] = useState(false);
  const navigate = useNavigate(); 
  
  const sendNewsletter = () => {
    // Logic to send the newsletter
    console.log('Sending newsletter to:', recipients);
  };

  const handleRecipientsChange = (selectedRecipients) => {
    setRecipients(selectedRecipients);
  };

  const selectAudience = () => {
    navigate('/dashboard/newsletter/audience');
  };

  return (
    <div className="mt-12">
      <div className="mb-4 grid grid-cols-1 gap-6 xl:grid-cols-3" style={{ width: '75%' }}>
        <Card className="overflow-hidden xl:col-span-3 border border-blue-gray-100 shadow-sm">
          <CardHeader
            floated={false}
            shadow={false}
            color="transparent"
            className="m-0 flex items-center justify-between p-6"
          >
            <div>
              <Typography variant="h6" color="blue-gray" className="mb-1">
                Newsletter
              </Typography>
              <Typography
                variant="small"
                className="flex items-center gap-1 font-normal text-blue-gray-600"
              >
              </Typography>
            </div>
          </CardHeader>
          <CardBody className="overflow-x-scroll px-0 pt-0 pb-2 flex items-center">
            <div className="flex flex-col items-start w-full pl-4"> {/* Adjusted for left alignment and added padding-left */}
              <div style={{ width: '75%', paddingBottom: '75px' }}> {/* Added paddingBottom */}
                <ReactQuill
                  theme="snow"
                  value={newsletterContent}
                  onChange={setNewsletterContent}
                  style={{ height: '500px' }}
                />
              </div>
              <div className="flex w-3/4 justify-start mb-4"> {/* Adjusted for button alignment */}
                <Button
                  color="black"
                  className="flex-grow"
                  onClick={selectAudience}
                >
                  <PaperAirplaneIcon className="w-4 h-4 mr-2" />
                  Choose Audience
                </Button>
              </div>
              <br />
              {showSelector && <AudienceSelector onSelectionChange={handleRecipientsChange} />}
            </div>
          </CardBody>
        </Card>
      </div>
    </div>
  );
}

export default Newsletter;

================
File: pages/dashboard/notifications.jsx
================
import React from "react";
import { Typography, Alert, Card, CardHeader, CardBody, } from "@material-tailwind/react";
import { InformationCircleIcon } from "@heroicons/react/24/outline";

export function Notifications() {
  const [showAlerts, setShowAlerts] = React.useState({
    blue: true,
    green: true,
    orange: true,
    red: true,
  });
  const [showAlertsWithIcon, setShowAlertsWithIcon] = React.useState({
    blue: true,
    green: true,
    orange: true,
    red: true,
  });
  const alerts = ["gray", "green", "orange", "red"];

  return (
    <div className="mx-auto my-20 flex max-w-screen-lg flex-col gap-8">
      <Card>
        <CardHeader
          color="transparent"
          floated={false}
          shadow={false}
          className="m-0 p-4"
        >
          <Typography variant="h5" color="blue-gray">
            Alerts
          </Typography>
        </CardHeader>
        <CardBody className="flex flex-col gap-4 p-4">
          {alerts.map((color) => (
            <Alert
              key={color}
              open={showAlerts[color]}
              color={color}
              onClose={() => setShowAlerts((current) => ({ ...current, [color]: false }))}
            >
              A simple {color} alert with an <a href="#">example link</a>. Give
              it a click if you like.
            </Alert>
          ))}
        </CardBody>
      </Card>
      <Card>
        <CardHeader
          color="transparent"
          floated={false}
          shadow={false}
          className="m-0 p-4"
        >
          <Typography variant="h5" color="blue-gray">
            Alerts with Icon
          </Typography>
        </CardHeader>
        <CardBody className="flex flex-col gap-4 p-4">
          {alerts.map((color) => (
            <Alert
              key={color}
              open={showAlertsWithIcon[color]}
              color={color}
              icon={
                <InformationCircleIcon strokeWidth={2} className="h-6 w-6" />
              }
              onClose={() => setShowAlertsWithIcon((current) => ({
                ...current,
                [color]: false,
              }))}
            >
              A simple {color} alert with an <a href="#">example link</a>. Give
              it a click if you like.
            </Alert>
          ))}
        </CardBody>
      </Card>
    </div>
  );
}

export default Notifications;

================
File: pages/dashboard/overview.jsx
================
import React from 'react';
import { Card, CardBody, CardHeader, Typography } from "@material-tailwind/react";

export function Overview() {
  return (
    <div className="mt-12">
      <div className="mb-4 grid grid-cols-1 gap-6 xl:grid-cols-3">
        <Card className="overflow-hidden xl:col-span-2 border border-blue-gray-100 shadow-sm" style={{ height: '600px' }}>
          <CardHeader
            floated={false}
            shadow={false}
            color="transparent"
            className="m-0 flex items-center justify-between p-6"
          >
            <Typography variant="h5" className="mb-4">Overview</Typography>
          </CardHeader>
          <CardBody className="px-4 py-2" style={{ marginLeft: '15px',  marginRight: '250px' }}>
            <Typography variant="paragraph" className="text-blue-gray-600">
              <strong>
                Syndicate was inspired by a conversation with a friend who missed Google Circles, where you could group friends and share content selectively. This concept didn't fully take off in 2011, as social networking was still in its infancy and people preferred sharing with everyone. But now, I find myself texting in group chats way more than I use Facebook. I think there's a slow shift towards more intimate and intentional communication.
                <br/><br/>
                I personally enjoy receiving updates from friends through email newsletters, finding them more authentic than social media posts. Syndicate users to subscribe to friends' lives and receive updates via email, or write newsletters for specific groups of subscribers. Unlike social media, this email-based system ensures that new subscribers can't access previous newsletters, offering a more private and controlled sharing experience.
              </strong>
            </Typography>
          </CardBody>
        </Card>
      </div>
    </div>
  );
}

export default Overview;

================
File: pages/dashboard/profile.jsx
================
import React, { useEffect, useState, useRef } from 'react';
import { useAuthState } from 'react-firebase-hooks/auth';
import { collection, query, where, getDoc, getDocs, doc, updateDoc } from 'firebase/firestore';
import { auth, db } from '../../../firebase-config';
import { Card, CardBody, CardHeader, CardFooter, Avatar, Typography, Tabs, TabsHeader, Tab, Switch, Tooltip, Button, } from "@material-tailwind/react";
import { HomeIcon, ChatBubbleLeftEllipsisIcon, Cog6ToothIcon, PencilIcon, } from "@heroicons/react/24/solid";
import { ProfileInfoCard } from "@/widgets/cards";

export function Profile() {
  const [user, loading, error] = useAuthState(auth);
  const [profileData, setProfileData] = useState({ name: '', uidPublic: '', email: '', bio: '', mobile: '', location: '' });
  const [editMode, setEditMode] = useState({ bio: false, mobile: false, location: false });
  const [showSaveConfirmation, setShowSaveConfirmation] = useState(false);
  const inputRef = useRef(null); // Create a ref for the input
  const textareaRef = useRef(null); // Create a ref for the textarea
  const avatarPath = profileData.photo ? profileData.photo.replace('syndicate/public', '') : '';
  const [following, setFollowing] = useState([]);

  useEffect(() => {
    const fetchFollowing = async () => {
      if (user) {
        const q = query(collection(db, 'users'), where('email', '==', user.email));
        const querySnapshot = await getDocs(q);
        if (!querySnapshot.empty) {
          const userData = querySnapshot.docs[0].data();
          const followingIds = userData.following || [];
          const followingData = await Promise.all(followingIds.map(async (userId) => {
            const userDoc = await getDoc(doc(db, 'users', userId));
            return userDoc.exists() ? { id: userDoc.id, ...userDoc.data() } : null;
          }));
          setFollowing(followingData.filter(user => user !== null));
        }
      }
    };

    fetchFollowing();
  }, [user]);


  useEffect(() => {
    const fetchProfileData = async () => {
      if (loading) return;
      if (error) {
        console.error("Firebase auth error", error);
        return;
      }
      if (user) {
        const usersRef = collection(db, 'users');
        const q = query(usersRef, where('email', '==', user.email));
        const querySnapshot = await getDocs(q);

        if (!querySnapshot.empty) {
          const userData = querySnapshot.docs[0].data();
          setProfileData({
            name: userData.name,
            uidPublic: userData.uidPublic,
            email: userData.email,
            bio: userData.bio,
            mobile: userData.mobile,
            location: userData.location,
            photo: userData.photo ? userData.photo.replace('syndicate/public', '') : ''
          });
        }
      }
    };

    fetchProfileData();
  }, [user, loading, error]);



  const handleEdit = (field) => {
    setEditMode({ ...editMode, [field]: !editMode[field] });
  };

  const handleSave = async (field, value) => {
    try {
      // Step 1: Query for the user document by email
      const usersRef = collection(db, 'users');
      const q = query(usersRef, where('email', '==', user.email)); // Assuming `user.email` contains the user's email
      const querySnapshot = await getDocs(q);

      if (!querySnapshot.empty) {
        // Assuming there's only one document for each email
        const userDoc = querySnapshot.docs[0];
        const userDocRef = userDoc.ref;

        // Step 2: Update the document
        await updateDoc(userDocRef, {
          [field]: value,
        });

        console.log("Document successfully updated");
        setShowSaveConfirmation(true); // Show confirmation message
        setTimeout(() => setShowSaveConfirmation(false), 3000); // Hide after 3 seconds
      } else {
        console.log("No document found with the given email");
      }
    } catch (error) {
      console.error("Error updating document:", error);
    }
  };

  const renderEditableField = (field, value) => {
    const isBio = field === 'bio';
    return editMode[field] ? (
      <div className="flex items-start justify-between">
        {isBio ? (
          <textarea
            ref={textareaRef} // Use the ref here
            value={value}
            onChange={(e) => setProfileData({ ...profileData, [field]: e.target.value })}
            autoFocus
            onBlur={() => handleEdit(field)}
            className="w-full resize-none border rounded-md p-2 h-36" 
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                e.preventDefault();
                handleSave(field, profileData[field]);
                handleEdit(field); // Toggle edit mode off
                textareaRef.current?.blur(); // Remove focus
              }
            }}
          />
        ) : (
          <input
            ref={inputRef} // Use the ref here
            type="text"
            value={value}
            onChange={(e) => setProfileData({ ...profileData, [field]: e.target.value })}
            autoFocus
            onBlur={() => handleEdit(field)}
            className="border rounded-md p-2 w-full"
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                e.preventDefault();
                handleSave(field, profileData[field]);
                handleEdit(field); // Toggle edit mode off
                inputRef.current?.blur(); // Remove focus
              }
            }}
          />
        )}
        <button onClick={() => handleSave(field, profileData[field])} className="ml-2 text-sm bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded">Save</button>
      </div>
    ) : (
      <div className="flex justify-between items-start w-full">
        <span className="flex-1">{value || 'Not set'}</span>
          <PencilIcon onClick={() => handleEdit(field)} className="h-5 w-5 cursor-pointer text-blue-gray-500" style={{ marginLeft: '5px' }} />
      </div>
    );
  };

  return (
    <>
      <div className="relative mt-8 h-72 w-full overflow-hidden rounded-xl bg-[url('/img/background-image.png')] bg-cover bg-center">
        <div className="absolute inset-0 h-full w-full bg-gray-900/75" />
      </div>
      <Card className="mx-3 -mt-16 mb-6 lg:mx-4 border border-blue-gray-100">
        <CardBody className="flex p-4">
          <div className="flex-1">
            <div className="mb-10 flex items-center justify-between flex-wrap gap-6">
              <div className="flex items-center gap-6">
                <Avatar
                  src={avatarPath}
                  alt="profile-picture"
                  size="xl"
                  variant="rounded"
                  className="rounded-lg shadow-lg shadow-blue-gray-500/40"
                />
                <div>
                  <Typography variant="h5" color="blue-gray" className="mb-1">
                    {profileData.name}
                  </Typography>
                  <Typography
                    variant="small"
                    className="font-normal text-blue-gray-600"
                  >
                    <b>Code</b>: {profileData.uidPublic}
                  </Typography>
                </div>
              </div>
            </div>
            <div className="grid-cols-1 mb-12 grid gap-12 px-4 lg:grid-cols-2 xl:grid-cols-3 w-full">
              <table className="w-full min-w-[640px] table-auto">
                <thead>
                  <tr>
                    {["Field", "Value"].map((el) => (
                      <th
                        key={el}
                        className="border-b border-blue-gray-50 py-3 px-6 text-left"
                      >
                        <Typography
                          variant="small"
                          className="text-[11px] font-medium uppercase text-blue-gray-400"
                        >
                          {el}
                        </Typography>
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td className="py-3 px-5 w-1/3">About Me</td>
                    <td className="py-3 px-5 w-2/3">{renderEditableField('bio', profileData.bio)}</td>
                  </tr>
                  <tr>
                    <td className="py-3 px-5">Email</td>
                    <td className="py-3 px-5">{profileData.email}</td>
                  </tr>
                  <tr>
                    <td className="py-3 px-5">Mobile</td>
                    <td className="py-3 px-5">{renderEditableField('mobile', profileData.mobile)}</td>
                  </tr>
                  <tr>
                    <td className="py-3 px-5">Location</td>
                    <td className="py-3 px-5">{renderEditableField('location', profileData.location)}</td>
                  </tr>
                  <tr>
                    <td className="py-3 px-5">Social</td>
                    <td className="py-3 px-5">
                      <div className="flex items-center gap-4">
                        <i className="fa-brands fa-facebook text-blue-700" />
                        <i className="fa-brands fa-twitter text-blue-400" />
                        <i className="fa-brands fa-instagram text-purple-500" />
                      </div>
                    </td>
                  </tr>
                </tbody>
              </table>
              {showSaveConfirmation && (
                <div className="text-sm text-green-500" style={{ marginLeft: '250px', marginTop: '-50px'}}>Changes saved successfully!</div>
              )}
            </div>
          </div>
          <div className="flex-1" style={{ maxWidth: '500px', marginLeft: 'auto', marginRight: '25px' }}>
            <Card className="border border-blue-gray-100 shadow-sm">
              <CardBody>
                <Typography variant="h5" className="mb-4">Following</Typography>
                <table className="w-full">
                  <thead>
                    <tr>
                      <th className="border-b border-blue-gray-50 py-3 px-6 text-left">
                        <Typography variant="small" className="text-[11px] font-medium uppercase text-blue-gray-400">
                          Name
                        </Typography>
                      </th>
                      <th className="border-b border-blue-gray-50 py-3 px-6 text-left">
                        <Typography variant="small" className="text-[11px] font-medium uppercase text-blue-gray-400">
                          Code
                        </Typography>
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {following.map((user) => (
                      <tr key={user.id}>
                        <td className="py-3 px-5 border-b border-blue-gray-50">
                          <Typography variant="small" color="blue-gray">
                            {user.name}
                          </Typography>
                        </td>
                        <td className="py-3 px-5 border-b border-blue-gray-50">
                          <Typography variant="small" color="blue-gray">
                            {user.uidPublic}
                          </Typography>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </CardBody>
            </Card>
          </div>
        </CardBody>
      </Card>
    </>
  );
}

export default Profile;

================
File: pages/dashboard/search.jsx
================
import React, { useState, useEffect } from 'react';
import { useLocation } from "react-router-dom";
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import { Avatar, Button, Card, CardBody, CardFooter, CardHeader, Chip, Progress, Switch, Tabs, TabsHeader, Tab, Tooltip, Typography, IconButton, Menu, MenuHandler, MenuList, MenuItem, List, ListItem, Input } from "@material-tailwind/react";
import { ArrowUpIcon, EllipsisVerticalIcon, CheckCircleIcon, ClockIcon, ChatBubbleLeftEllipsisIcon, Cog6ToothIcon, HomeIcon, PencilIcon, UsersIcon, PaperAirplaneIcon } from "@heroicons/react/24/solid";
import { EllipsisVerticalIcon as EllipsisVerticalOutlineIcon } from "@heroicons/react/24/outline";
import { Link } from "react-router-dom";
import { StatisticsCard, ProfileInfoCard, MessageCard } from "@/widgets/cards";
import { StatisticsChart } from "@/widgets/charts";
import { authorsTableData, platformSettingsData, projectsData, projectsTableData, conversationsData, statisticsCardsData, statisticsChartsData, ordersOverviewData } from "@/data";
import AudienceSelector from '../../helper/AudienceSelector';
import { ArrowRightIcon as ArrowNarrowRightIcon, ArrowLeftIcon as ArrowNarrowLeftIcon } from '@heroicons/react/24/outline';

export function Search() {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const location = useLocation();

  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
  };

  const performSearch = (e) => {
    e.preventDefault();
    // Perform the search using the searchQuery state
    // For example, filter the subscribers list or make an API call
    // Update the searchResults state with the results
    setSearchResults([{ id: 1, email: "user@example.com", group: "Group A" }]);
  };

  // Extract the search query from the URL when the component mounts and perform the search
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const query = searchParams.get('query');
    if (query) {
      performSearch(query);
    }
  }, [location]);

  return (
    <div className="mt-12">
      <div className="mb-4 grid grid-cols-1 gap-6 xl:grid-cols-3">
        <Card className="overflow-hidden xl:col-span-2 border border-blue-gray-100 shadow-sm">

          <CardHeader
            floated={false}
            shadow={false}
            color="transparent"
            className="m-0 flex items-center justify-between p-6"
          >
            <div>
              <Typography variant="h5" className="mb-4">Search</Typography>
              <Typography
                variant="small"
                className="flex items-center gap-1 font-normal text-blue-gray-600"
              >
              </Typography>
            </div>
          </CardHeader>
          <CardBody className="overflow-x-scroll px-0 pt-0 pb-2 flex items-center">
            <div className="flex flex-col items-start w-full pl-4"> {/* Adjusted for left alignment and added padding-left */}
              <div className="flex w-3/4 justify-start mb-4">
                <form onSubmit={performSearch}>
                  <Input
                    type="text"
                    value={searchQuery}
                    onChange={handleSearchChange}
                    placeholder="Search by email or code"
                    style={{ width: '500px' }}
                  />
                  <br />
                  <Button type="submit" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                    Search
                    <ArrowNarrowRightIcon className="h-5 w-5 ml-2" style={{ marginLeft: '8px' }} />
                  </Button>
                </form>
                <List>
                  {searchResults.map((result) => (
                    <ListItem key={result.id}>
                      {result.email} - {result.group}
                    </ListItem>
                  ))}
                </List>
              </div>
            </div>
          </CardBody>
        </Card>
      </div>
    </div>
  );
}

export default Search;

================
File: pages/dashboard/subscribers.jsx
================
import React, { useState, useEffect } from 'react';
import { collection, doc, getDoc, query, where, getDocs, updateDoc, arrayUnion, arrayRemove } from 'firebase/firestore';
import { Card, CardBody, Typography, Input, Button } from "@material-tailwind/react";
import { useAuthState } from 'react-firebase-hooks/auth';
import { db, auth } from '../../../firebase-config';
import { AdjustmentsHorizontalIcon } from '@heroicons/react/24/outline';

export function Subscribers() {
  const [user] = useAuthState(auth);
  const [followers, setFollowers] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [groups, setGroups] = useState([]);
  const [dropdownVisible, setDropdownVisible] = useState(null);

  const handleDropdown = (userId) => {
    setDropdownVisible(dropdownVisible === userId ? null : userId);
  };

  const handleSearchChange = (e) => {
    const query = e.target.value;
    setSearchQuery(query);

    const results = followers.filter((follower) =>
      follower.name.toLowerCase().includes(query.toLowerCase())
    );

    setSearchResults(results);
  };

  const performSearch = (e) => {
    e.preventDefault();
    const results = followers.filter((follower) =>
      follower.name.toLowerCase().includes(searchQuery.toLowerCase())
    );
    setSearchResults(results);
  };

  useEffect(() => {
    const fetchUserDetails = async (userIds) => {
      const userDetails = await Promise.all(userIds.map(async (userId) => {
        const userDoc = await getDoc(doc(db, 'users', userId));
        console.log(`User Doc for userId ${userId}:`, userDoc.exists() ? userDoc.data() : 'Not found');
        const userData = userDoc.exists() ? { id: userDoc.id, ...userDoc.data() } : null;

        if (userData) {
          // Fetch group memberships for each user
          const groupQuery = query(collection(db, 'groups'), where('members', 'array-contains', userId));
          const groupSnapshot = await getDocs(groupQuery);
          const userGroups = groupSnapshot.docs.map(groupDoc => groupDoc.id);
          console.log(`Groups for userId ${userId}:`, userGroups);


          userData.groups = userGroups;
        }

        return userData;
      }));
      console.log('User Details before filtering:', userDetails);
      // return userDetails.filter(user => user !== null);
      return userDetails; // This will include all users, even if some are null

    };

    const fetchGroupsData = async () => {
      const userIdH = "2F6uNbw9o4hjAzNgy5I3";
      if (user) {
        try {
          const q = query(collection(db, 'groups'), where('userId', '==', userIdH));
          const querySnapshot = await getDocs(q);
          if (querySnapshot.empty) {
            console.log("No groups found for user ID:", userIdH);
          } else {
            const groupsData = querySnapshot.docs.map(doc => ({
              id: doc.id,
              ...doc.data()
            }));
            console.log('Fetched Groups Data:', groupsData);
            setGroups(groupsData);
          }
        } catch (error) {
          console.error("Error fetching groups data:", error);
        }
      }
    };

    const fetchUserData = async () => {
      if (user) {
        try {
          const q = query(collection(db, 'users'), where('email', '==', user.email));
          const querySnapshot = await getDocs(q);
          if (!querySnapshot.empty) {
            const userData = querySnapshot.docs[0].data();
            console.log('Fetched User Data:', userData);
            const followersData = await fetchUserDetails(userData.followers || []);
            console.log('Followers Data before unique filter:', followersData);
            const uniqueFollowers = followersData.filter((v, i, a) =>
              v !== null && a.findIndex(t => t !== null && t.id === v.id) === i
            );
            console.log('Unique Followers:', uniqueFollowers);
            setFollowers(uniqueFollowers);
          }

          await fetchGroupsData();
        } catch (error) {
          console.error("Error fetching user data:", error);
        }
      }
    };

    fetchUserData();
  }, [user]);

  const handleGroupMembershipChange = async (userId, groupId, isChecked) => {
    const userRef = doc(db, 'users', userId);
    const groupRef = doc(db, 'groups', groupId);

    if (isChecked) {
      await updateDoc(userRef, {
        groups: arrayUnion(groupId)
      });
      await updateDoc(groupRef, {
        members: arrayUnion(userId)
      });
    } else {
      await updateDoc(userRef, {
        groups: arrayRemove(groupId)
      });
      await updateDoc(groupRef, {
        members: arrayRemove(userId)
      });
    }

    // Update the followers state to reflect the changes
    setFollowers(followers.map(follower => {
      if (follower.id === userId) {
        return {
          ...follower,
          groups: isChecked ? [...(follower.groups || []), groupId] : (follower.groups || []).filter(id => id !== groupId)
        };
      }
      return follower;
    }));

    // Update the groups state to reflect the changes
    setGroups(groups.map(group => {
      if (group.id === groupId) {
        return {
          ...group,
          members: isChecked ? [...(group.members || []), userId] : (group.members || []).filter(id => id !== userId)
        };
      }
      return group;
    }));
    console.log('Updated Followers after group change:', followers);
    console.log('Updated Groups after group change:', groups);
  };


  return (
    <div className="mt-12">
      <div className="flex mb-4 gap-6">
        <div className="w-3/5">
          <Card className="overflow-y-auto h-[600px] border border-blue-gray-100 shadow-sm">
            <CardBody>
              <Typography variant="h5" className="mb-4">Followers</Typography>
              <div className="mb-4">
                <div className="w-1/2">
                  <form onSubmit={performSearch}>
                    <Input
                      type="text"
                      value={searchQuery}
                      onChange={handleSearchChange}
                      placeholder="Search Followers..."
                    />
                    <br />
                    <Button type="submit">Search</Button>
                  </form>
                </div>
              </div>

              <table className="w-full min-w-[640px] table-auto">
                <thead>
                  <tr>
                    <th className="border-b border-blue-gray-50 py-3 px-6 text-left">
                      <Typography variant="small" className="text-[11px] font-medium uppercase text-blue-gray-400">
                        Name
                      </Typography>
                    </th>
                    <th className="border-b border-blue-gray-50 py-3 px-6 text-left">
                      <Typography variant="small" className="text-[11px] font-medium uppercase text-blue-gray-400">
                        Public ID
                      </Typography>
                    </th>
                    <th className="border-b border-blue-gray-50 py-3 px-6 text-left">
                      <Typography variant="small" className="text-[11px] font-medium uppercase text-blue-gray-400">
                        Actions
                      </Typography>
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {(searchResults.length > 0 ? searchResults : followers).map((user) => (
                    <tr key={user.id}>
                      <td className="py-3 px-5 border-b border-blue-gray-50 flex items-center gap-4">
                        <img src={user.photo.replace('syndicate/public', '')} alt="Avatar" className="w-10 h-10 rounded-full" />
                        <Typography variant="small" color="blue-gray">
                          {user.name}
                        </Typography>
                      </td>
                      <td className="py-3 px-5 border-b border-blue-gray-50">
                        <Typography variant="small" color="blue-gray">
                          {user.uidPublic}
                        </Typography>
                      </td>
                      <td className="py-3 px-5 border-b border-blue-gray-50 relative">
                        <button
                          className="text-gray-700 font-semibold py-2 px-4 rounded inline-flex items-center"
                          onClick={() => handleDropdown(user.id)}
                        >
                          <AdjustmentsHorizontalIcon className="h-5 w-5" />
                        </button>
                        {dropdownVisible === user.id && (
                          <div className="origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-10">
                            <div className="py-1" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                              {groups.map(group => (
                                <label key={group.id} className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                                  <input
                                    type="checkbox"
                                    className="form-checkbox"
                                    checked={(user.groups || []).includes(group.id)}
                                    onChange={(e) => handleGroupMembershipChange(user.id, group.id, e.target.checked)}
                                  />
                                  <span className="ml-3">{group.groupName}</span>
                                </label>
                              ))}
                            </div>
                          </div>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </CardBody>
          </Card>
        </div>
        <div className="flex-1" style={{ maxWidth: '500px', marginRight: '40px' }}>
          <Card className="border border-blue-gray-100 shadow-sm">
            <CardBody>
              <div className="flex justify-between items-center mb-4">
                <Typography variant="h5">Groups</Typography>
                <Button className="text-xs">+ Add Group</Button>
              </div>
              <table className="w-full">
                <thead>
                  <tr>
                    <th className="border-b border-blue-gray-50 py-3 px-6 text-left">
                      <Typography variant="small" className="text-[11px] font-medium uppercase text-blue-gray-400">
                        Group Name
                      </Typography>
                    </th>
                    <th className="border-b border-blue-gray-50 py-3 px-6 text-left">
                      <Typography variant="small" className="text-[11px] font-medium uppercase text-blue-gray-400">
                        Members
                      </Typography>
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {groups.map((group) => (
                    <tr key={group.id}>
                      <td className="py-3 px-5 border-b border-blue-gray-50">
                        <Typography variant="small" color="blue-gray">
                          {group.groupName}
                        </Typography>
                      </td>
                      <td className="py-3 px-5 border-b border-blue-gray-50">
                        <Typography variant="small" color="blue-gray">
                          {group.members ? group.members.length : 0}
                        </Typography>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </CardBody>
          </Card>
        </div>

      </div>
    </div>
  );
}

export default Subscribers;

================
File: services/dbFormat.js
================
import { db } from '../../firebase-config.js';
import { collection, getDocs } from 'firebase/firestore';

const logCollectionDocuments = async (collectionName) => {
    const collectionRef = collection(db, collectionName);
    const snapshot = await getDocs(collectionRef);

    console.log(`Documents in '${collectionName}' collection:`);
    snapshot.forEach(doc => {
        console.log(`Document ID: ${doc.id}, Data: `, doc.data());
    });
};

const logDocumentsFromCollections = async () => {
    const collectionNames = ['users', 'groups'];
    for (const collectionName of collectionNames) {
        await logCollectionDocuments(collectionName);
    }
};

logDocumentsFromCollections()
    .then(() => console.log('Finished logging documents.'))
    .catch((error) => console.error('Error logging documents:', error));

================
File: services/ErrorBoundary.jsx
================
import React from 'react';

class ErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false };
    }

    static getDerivedStateFromError(error) {
        // Update state so the next render will show the fallback UI.
        return { hasError: true };
    }

    componentDidCatch(error, errorInfo) {
        // You can log the error to an error reporting service here
        console.error('Uncaught error:', error, errorInfo);
    }

    render() {
        if (this.state.hasError) {
            // You can render any custom fallback UI
            return <h1>Something went wrong.</h1>;
        }

        return this.props.children;
    }
}

export default ErrorBoundary;

================
File: services/initFollowers.js
================
import { db } from '../../firebase-config.js';
import { collection, query, where, getDocs, updateDoc, doc } from 'firebase/firestore';

// Function to fetch uidPublic for all users
const fetchUidPublicMap = async () => {
    const usersRef = collection(db, 'users');
    const q = query(usersRef, where('name', '!=', ''));
    const querySnapshot = await getDocs(q);
    const uidPublicMap = {};
    querySnapshot.forEach((doc) => {
        const data = doc.data();
        uidPublicMap[data.name] = doc.id;
    });
    return uidPublicMap;
};

const assignFollowersAndFollowing = async (uidPublicMap) => {
    // Define followers and following based on uidPublic
    const userRelations = {
        'Alice': { following: ['Bob', 'Charles'], followers: ['Diana'] },
        'Bob': { following: ['Alice'], followers: ['Alice', 'Charles', 'Diana'] },
        'Charles': { following: ['Diana'], followers: ['Alice', 'Bob'] },
        'Diana': { following: ['Alice', 'Bob'], followers: ['Charles'] },
        'Fiona': { following: ['George'], followers: ['Hannah'] },
        'George': { following: ['Fiona'], followers: ['Fiona', 'Hannah'] },
        'Hannah': { following: ['Fiona', 'George'], followers: ['George'] },
        'Ian': { following: ['Julie'], followers: ['Julie'] },
        'Julie': { following: ['Ian'], followers: ['Ian'] },
    };

    for (const [name, relations] of Object.entries(userRelations)) {
        const uidPublic = uidPublicMap[name];
        const userRef = doc(db, 'users', uidPublic);

        // Convert names to uidPublic for following and followers
        const followingUidPublic = relations.following.map(name => uidPublicMap[name]);
        const followersUidPublic = relations.followers.map(name => uidPublicMap[name]);

        // Update the user document with following and followers
        await updateDoc(userRef, {
            following: followingUidPublic,
            followers: followersUidPublic,
        });
    }
};

// Main function to run the script
const run = async () => {
    try {
        const uidPublicMap = await fetchUidPublicMap();
        await assignFollowersAndFollowing(uidPublicMap);
        console.log('Successfully assigned followers and following.');
    } catch (error) {
        console.error('Failed to assign followers and following:', error);
    }
};

run();

================
File: services/initUsers.js
================
import { db } from '../../firebase-config.js';
import { collection, addDoc, doc, updateDoc, query, where, getDocs } from 'firebase/firestore';
import { createUserWithEmailAndPassword } from "firebase/auth";
import { auth } from '../../firebase-config.js';

const registerUserWithAuth = async (email, password) => {
    try {
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        return userCredential.user;
    } catch (error) {
        console.error("Error registering user with auth:", error);
        return null;
    }
};

const generateHash = (userId) => {
    // Define an array of allowed ASCII character codes based on the specified ranges
    const allowedCharCodes = [
        33, ...Array.from({ length: (38 - 35 + 1) }, (_, i) => i + 35),
        ...Array.from({ length: (43 - 42 + 1) }, (_, i) => i + 42),
        45, ...Array.from({ length: (57 - 48 + 1) }, (_, i) => i + 48),
        ...Array.from({ length: (91 - 59 + 1) }, (_, i) => i + 59),
        ...Array.from({ length: (95 - 93 + 1) }, (_, i) => i + 93),
        ...Array.from({ length: (126 - 98 + 1) }, (_, i) => i + 98),
    ];

    let hash = '';
    for (let i = 0; i < 4; i++) {
        // Use the userId to generate an index for the allowedCharCodes array
        const charCode = userId.charCodeAt(i % userId.length);
        const index = charCode % allowedCharCodes.length;
        const hashCharCode = allowedCharCodes[index];
        hash += String.fromCharCode(hashCharCode);
    }
    return hash;
};

const createUser = async (email, name) => {
    const defaultPassword = "password"; 
    const userAuth = await registerUserWithAuth(email, defaultPassword);
    if (!userAuth) {
        return null; // Stop if the user couldn't be registered
    }

    await addDoc(collection(db, 'users'), {
        email,
        name,
        uidPublic: generateHash(userAuth.uid), // Use Auth UID for uidPublic generation
    });

    return userAuth.uid; // Return the Auth UID
};

const createUsersAndAssignRelations = async () => {
    // Define users and their email addresses
    const users = [
        { email: 'a0@gmail.com', name: 'Alice' },
        { email: 'a1@gmail.com', name: 'Bob' },
        { email: 'a2@gmail.com', name: 'Charles' },
        { email: 'a3@gmail.com', name: 'Diana' },
        { email: 'b0@gmail.com', name: 'Fiona' },
        { email: 'b1@gmail.com', name: 'George' },
        { email: 'b2@gmail.com', name: 'Hannah' },
        { email: 'c0@gmail.com', name: 'Ian' },
        { email: 'c1@gmail.com', name: 'Julie' },
    ];

    // Create users and store uidPublic values
    for (const user of users) {
        await createUser(user.email, user.name);
    }
};

createUsersAndAssignRelations()
    .then(() => console.log('Users have been created'))
    .catch((error) => console.error('Failed to create users:', error));

================
File: services/wm.js
================
function generateHash(uid) {
    const allowedCharCodes = [
        33, ...Array.from({ length: (38 - 35 + 1) }, (_, i) => i + 35),
        ...Array.from({ length: (43 - 42 + 1) }, (_, i) => i + 42),
        45, ...Array.from({ length: (57 - 48 + 1) }, (_, i) => i + 48),
        ...Array.from({ length: (91 - 59 + 1) }, (_, i) => i + 59),
        ...Array.from({ length: (95 - 93 + 1) }, (_, i) => i + 93),
        ...Array.from({ length: (126 - 98 + 1) }, (_, i) => i + 98),
    ];

    let hash = '';
    for (let i = 0; i < 4; i++) {
        const charCode = uid.charCodeAt(i % uid.length);
        const index = charCode % allowedCharCodes.length;
        const hashCharCode = allowedCharCodes[index];
        hash += String.fromCharCode(hashCharCode);
    }
    console.log(hash)
}

const uid = "hQQZ6v88iroSDf4OlG3i";

generateHash(uid);

================
File: utils/ProtectedRoute.jsx
================
import React, { useEffect, useState } from 'react';
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { Navigate } from 'react-router-dom';

const ProtectedRoute = ({ children }) => {
    const [currentUser, setCurrentUser] = useState(null);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const auth = getAuth();
        const unsubscribe = onAuthStateChanged(auth, (user) => {
            setCurrentUser(user);
            setIsLoading(false);
        });

        return unsubscribe;
    }, []);

    if (isLoading) {
        return <div>Loading...</div>;
    }

    return currentUser ? children : <Navigate to="/auth/sign-in" />;
};

export default ProtectedRoute;

================
File: widgets/cards/index.js
================
export * from "@/widgets/cards/statistics-card";
export * from "@/widgets/cards/profile-info-card";
export * from "@/widgets/cards/message-card";

================
File: widgets/cards/message-card.jsx
================
import PropTypes from "prop-types";
import { Avatar, Typography } from "@material-tailwind/react";

export function MessageCard({ img, name, message, action }) {
  return (
    <div className="flex items-center justify-between gap-4">
      <div className="flex items-center gap-4">
        <Avatar
          src={img}
          alt={name}
          variant="rounded"
          className="shadow-lg shadow-blue-gray-500/25"
        />
        <div>
          <Typography
            variant="small"
            color="blue-gray"
            className="mb-1 font-semibold"
          >
            {name}
          </Typography>
          <Typography className="text-xs font-normal text-blue-gray-400">
            {message}
          </Typography>
        </div>
      </div>
      {action}
    </div>
  );
}

MessageCard.defaultProps = {
  action: null,
};

MessageCard.propTypes = {
  img: PropTypes.string.isRequired,
  name: PropTypes.string.isRequired,
  message: PropTypes.node.isRequired,
  action: PropTypes.node,
};

MessageCard.displayName = "/src/widgets/cards/message-card.jsx";

export default MessageCard;

================
File: widgets/cards/profile-info-card.jsx
================
import PropTypes from "prop-types"; 
import { Card, CardHeader, CardBody, Typography, } from "@material-tailwind/react";

export function ProfileInfoCard({ title, bio, details, action }) {
  return (
    <Card color="transparent" shadow={false}>
      <CardHeader
        color="transparent"
        shadow={false}
        floated={false}
        className="mx-0 mt-0 mb-4 flex items-center justify-between gap-4"
      >
        <Typography variant="h6" color="blue-gray">
          {title}
        </Typography>
        {action}
      </CardHeader>
      <CardBody className="p-0">
        {bio && (
          <Typography
            variant="small"
            className="font-normal text-blue-gray-500"
          >
            {bio}
          </Typography>
        )}
        {bio && details ? (
          <hr className="my-8 border-blue-gray-50" />
        ) : null}
        {details && (
          <ul className="flex flex-col gap-4 p-0">
            {Object.keys(details).map((el, key) => (
              <li key={key} className="flex items-center gap-4">
                <Typography
                  variant="small"
                  color="blue-gray"
                  className="font-semibold capitalize"
                >
                  {el}:
                </Typography>
                {typeof details[el] === "string" ? (
                  <Typography
                    variant="small"
                    className="font-normal text-blue-gray-500"
                  >
                    {details[el]}
                  </Typography>
                ) : (
                  details[el]
                )}
              </li>
            ))}
          </ul>
        )}
      </CardBody>
    </Card>
  );
}

ProfileInfoCard.defaultProps = {
  action: null,
  bio: null,
  details: {},
};

ProfileInfoCard.propTypes = {
  title: PropTypes.string.isRequired,
  bio: PropTypes.node,
  details: PropTypes.object,
};

ProfileInfoCard.displayName = "/src/widgets/cards/profile-info-card.jsx";

export default ProfileInfoCard;

================
File: widgets/cards/statistics-card.jsx
================
import { Card, CardHeader, CardBody, CardFooter, Typography, } from "@material-tailwind/react";
import PropTypes from "prop-types";

export function StatisticsCard({ color, icon, title, value, footer }) {
  return (
    <Card className="border border-blue-gray-100 shadow-sm">
      <CardHeader
        variant="gradient"
        color={color}
        floated={false}
        shadow={false}
        className="absolute grid h-12 w-12 place-items-center"
      >
        {icon}
      </CardHeader>
      <CardBody className="p-4 text-right">
        <Typography variant="small" className="font-normal text-blue-gray-600">
          {title}
        </Typography>
        <Typography variant="h4" color="blue-gray">
          {value}
        </Typography>
      </CardBody>
      {footer && (
        <CardFooter className="border-t border-blue-gray-50 p-4">
          {footer}
        </CardFooter>
      )}
    </Card>
  );
}

StatisticsCard.defaultProps = {
  color: "blue",
  footer: null,
};

StatisticsCard.propTypes = {
  color: PropTypes.oneOf([
    "white",
    "blue-gray",
    "gray",
    "brown",
    "deep-orange",
    "orange",
    "amber",
    "yellow",
    "lime",
    "light-green",
    "green",
    "teal",
    "cyan",
    "light-blue",
    "blue",
    "indigo",
    "deep-purple",
    "purple",
    "pink",
    "red",
  ]),
  icon: PropTypes.node.isRequired,
  title: PropTypes.node.isRequired,
  value: PropTypes.node.isRequired,
  footer: PropTypes.node,
};

StatisticsCard.displayName = "/src/widgets/cards/statistics-card.jsx";

export default StatisticsCard;

================
File: widgets/charts/index.js
================
export * from "@/widgets/charts/statistics-chart";

================
File: widgets/charts/statistics-chart.jsx
================
import { Card, CardHeader, CardBody, CardFooter, Typography, } from "@material-tailwind/react";
import PropTypes from "prop-types";
import Chart from "react-apexcharts";

export function StatisticsChart({ color, chart, title, description, footer }) {
  return (
    <Card className="border border-blue-gray-100 shadow-sm">
      <CardHeader variant="gradient" color={color} floated={false} shadow={false}>
        <Chart {...chart} />
      </CardHeader>
      <CardBody className="px-6 pt-0">
        <Typography variant="h6" color="blue-gray">
          {title}
        </Typography>
        <Typography variant="small" className="font-normal text-blue-gray-600">
          {description}
        </Typography>
      </CardBody>
      {footer && (
        <CardFooter className="border-t border-blue-gray-50 px-6 py-5">
          {footer}
        </CardFooter>
      )}
    </Card>
  );
}

StatisticsChart.defaultProps = {
  color: "blue",
  footer: null,
};

StatisticsChart.propTypes = {
  color: PropTypes.oneOf([
    "white",
    "blue-gray",
    "gray",
    "brown",
    "deep-orange",
    "orange",
    "amber",
    "yellow",
    "lime",
    "light-green",
    "green",
    "teal",
    "cyan",
    "light-blue",
    "blue",
    "indigo",
    "deep-purple",
    "purple",
    "pink",
    "red",
  ]),
  chart: PropTypes.object.isRequired,
  title: PropTypes.node.isRequired,
  description: PropTypes.node.isRequired,
  footer: PropTypes.node,
};

StatisticsChart.displayName = "/src/widgets/charts/statistics-chart.jsx";

export default StatisticsChart;

================
File: widgets/layout/configurator.jsx
================
import React from "react";
import { XMarkIcon } from "@heroicons/react/24/outline";
import { Button, IconButton, Switch, Typography, Chip, } from "@material-tailwind/react"; 
import { useMaterialTailwindController, setOpenConfigurator, setSidenavColor, setSidenavType, setFixedNavbar, } from "@/context";

function formatNumber(number, decPlaces) {
  decPlaces = Math.pow(10, decPlaces);

  const abbrev = ["K", "M", "B", "T"];

  for (let i = abbrev.length - 1; i >= 0; i--) {
    var size = Math.pow(10, (i + 1) * 3);

    if (size <= number) {
      number = Math.round((number * decPlaces) / size) / decPlaces;

      if (number == 1000 && i < abbrev.length - 1) {
        number = 1;
        i++;
      }

      number += abbrev[i];

      break;
    }
  }

  return number;
}

export function Configurator() {
  const [controller, dispatch] = useMaterialTailwindController();
  const { openConfigurator, sidenavColor, sidenavType, fixedNavbar } =
    controller;
  const [stars, setStars] = React.useState(0);

  const sidenavColors = {
    white: "from-gray-100 to-gray-100 border-gray-200",
    dark: "from-black to-black border-gray-200",
    green: "from-green-400 to-green-600",
    orange: "from-orange-400 to-orange-600",
    red: "from-red-400 to-red-600",
    pink: "from-pink-400 to-pink-600",
  };

  React.useEffect(() => {
    const stars = fetch(
      "https://api.github.com/repos/creativetimofficial/material-tailwind-dashboard-react"
    )
      .then((response) => response.json())
      .then((data) => setStars(formatNumber(data.stargazers_count, 1)));
  }, []);

  return (
    <aside
      className={`fixed top-0 right-0 z-50 h-screen w-96 bg-white px-2.5 shadow-lg transition-transform duration-300 ${
        openConfigurator ? "translate-x-0" : "translate-x-96"
      }`}
    >
      <div className="flex items-start justify-between px-6 pt-8 pb-6">
        <div>
          <Typography variant="h5" color="blue-gray">
            Dashboard Configurator
          </Typography>
          <Typography className="font-normal text-blue-gray-600">
            See our dashboard options.
          </Typography>
        </div>
        <IconButton
          variant="text"
          color="blue-gray"
          onClick={() => setOpenConfigurator(dispatch, false)}
        >
          <XMarkIcon strokeWidth={2.5} className="h-5 w-5" />
        </IconButton>
      </div>
      <div className="py-4 px-6">
        <div className="mb-12">
          <Typography variant="h6" color="blue-gray">
            Sidenav Colors
          </Typography>
          <div className="mt-3 flex items-center gap-2">
            {Object.keys(sidenavColors).map((color) => (
              <span
                key={color}
                className={`h-6 w-6 cursor-pointer rounded-full border bg-gradient-to-br transition-transform hover:scale-105 ${
                  sidenavColors[color]
                } ${
                  sidenavColor === color ? "border-black" : "border-transparent"
                }`}
                onClick={() => setSidenavColor(dispatch, color)}
              />
            ))}
          </div>
        </div>
        <div className="mb-12">
          <Typography variant="h6" color="blue-gray">
            Sidenav Types
          </Typography>
          <Typography variant="small" color="gray">
            Choose between 3 different sidenav types.
          </Typography>
          <div className="mt-3 flex items-center gap-2">
            <Button
              variant={sidenavType === "dark" ? "gradient" : "outlined"}
              onClick={() => setSidenavType(dispatch, "dark")}
            >
              Dark
            </Button>
            <Button
              variant={sidenavType === "transparent" ? "gradient" : "outlined"}
              onClick={() => setSidenavType(dispatch, "transparent")}
            >
              Transparent
            </Button>
            <Button
              variant={sidenavType === "white" ? "gradient" : "outlined"}
              onClick={() => setSidenavType(dispatch, "white")}
            >
              White
            </Button>
          </div>
        </div>
        <div className="mb-12">
          <hr />
          <div className="flex items-center justify-between py-5">
            <Typography variant="h6" color="blue-gray">
              Navbar Fixed
            </Typography>
            <Switch
              id="navbar-fixed"
              value={fixedNavbar}
              onChange={() => setFixedNavbar(dispatch, !fixedNavbar)}
            />
          </div>
          <hr />
          <div className="my-8 flex flex-col gap-4">
            <a
              href="https://www.creative-tim.com/product/material-tailwind-dashboard-react?rel=mtdr"
              target="_black"
            >
              <Button variant="gradient" fullWidth>
                Free Download
              </Button>
            </a>
            <a
              href="https://www.material-tailwind.com/docs/react/installation?rel=mtdr"
              target="_black"
            >
              <Button variant="outlined" color="blue-gray" fullWidth>
                View Documentation
              </Button>
            </a>
            <a
              href="https://www.material-tailwind.com/blocks/react?rel=mtdr"
              target="_black"
            >
              <Button variant="outlined" color="blue-gray" fullWidth>
                Material Tailwind PRO
              </Button>
            </a>
          </div>
          <a
            className="mx-auto flex items-center justify-center gap-2"
            href="https://github.com/creativetimofficial/material-tailwind-dashboard-react"
            target="_blank"
            rel="noreferrer"
          >
            <Chip
              value={`${stars} - Stars`}
              icon={
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  className="mt-px ml-1.5 h-4 w-4"
                >
                  <path
                    fillRule="evenodd"
                    d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z"
                    clipRule="evenodd"
                  />
                </svg>
              }
              className="bg-blue-gray-900 px-4"
            />
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
            >
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
            </svg>
          </a>
        </div>
        <div className="text-center">
          <Typography variant="h6" color="blue-gray">
            Thank you for sharing ❤️
          </Typography>
          <div className="mt-4 flex justify-center gap-2">
            <Button
              variant="gradient"
              className="flex items-center gap-2"
            >
              <i className="fa-brands fa-twitter text-white" />
              Tweet
            </Button>
            <Button
              variant="gradient"
              className="flex items-center gap-2"
            >
              <i className="fa-brands fa-facebook text-white" />
              Share
            </Button>
          </div>
        </div>
      </div>
    </aside>
  );
}

Configurator.displayName = "/src/widgets/layout/configurator.jsx";

export default Configurator;

================
File: widgets/layout/dashboard-navbar.jsx
================
import { useLocation, Link, useNavigate } from "react-router-dom"; 
import { Navbar, Typography, Button, IconButton, Breadcrumbs, Input, Menu, MenuHandler, MenuList, MenuItem, Avatar, } from "@material-tailwind/react"; import { UserCircleIcon, Cog6ToothIcon, BellIcon, ClockIcon, CreditCardIcon, Bars3Icon, } from "@heroicons/react/24/solid"; 
import { useMaterialTailwindController, setOpenConfigurator, setOpenSidenav, } from "@/context";
import React, { useState, useRef, useEffect } from 'react';
import { signOut } from "firebase/auth";
import { auth } from '../../../firebase-config';

const handleSignOut = async () => {
  try {
    await signOut(auth);
  } catch (error) {
    console.error("Error signing out:", error);
  }
};

export function DashboardNavbar() {
  const [controller, dispatch] = useMaterialTailwindController();
  const { fixedNavbar, openSidenav } = controller;
  const { pathname } = useLocation();
  const pathSegments = pathname.split("/").filter((el) => el !== "");
  const [searchQuery, setSearchQuery] = useState('');
  const [showDropdown, setShowDropdown] = useState(false);
  const navigate = useNavigate();
  const dropdownRef = useRef(null);
  const [layout, page] = pathname.split("/").filter((el) => el !== "");
  const handleSignOut = async () => {
    try {
      await signOut(auth);
      // Redirect to sign-in page or update state as necessary
    } catch (error) {
      console.error("Error signing out: ", error);
    }
  };

  const handleSearchChange = (e) => {
    const query = e.target.value;
    setSearchQuery(query);
    setShowDropdown(e.target.value.length > 0);
  };

  const handleViewAllResults = () => {
    // navigate(`/search?query=${searchQuery}`);
    navigate(`../../dashboard/search`);
    setShowDropdown(false); // Hide the dropdown
  };

  const formatSegment = (segment) => {
    // Custom formatting logic here. For example, replace dashes with spaces and capitalize.
    return segment.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  };

  useEffect(() => {
    function handleClickOutside(event) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setShowDropdown(false); // Hide the dropdown
      }
    }

    // Attach the listener to the document
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      // Clean up the listener
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [dropdownRef]);

  const breadcrumbNames = {
    "/dashboard/home": "Home",
    "/dashboard/profile": "Profile",
    "/dashboard/newsletter": "Newsletter",
    "/dashboard/newsletter/audience": "Audience",
    "/dashboard/subscribers": "Subscribers",
    "/dashboard/search": "Search",
  };

  // Helper function to create breadcrumb items
  const createBreadcrumbItems = () => {
    const pathSegments = pathname.split("/").filter(el => el !== "");
    const breadcrumbItems = pathSegments.map((segment, index) => {
      const path = `/${pathSegments.slice(0, index + 1).join('/')}`;
      const name = breadcrumbNames[path] || segment.charAt(0).toUpperCase() + segment.slice(1);
      return { name, path };
    });

    // Special case for "Dashboard" to navigate to "/dashboard/home"
    if (breadcrumbItems.length > 0 && breadcrumbItems[0].name.toLowerCase() === "dashboard") {
      breadcrumbItems[0].path = "/dashboard/home";
    }

    return breadcrumbItems;
  };

  const breadcrumbItems = createBreadcrumbItems();

  return (
    <Navbar color="white" className="rounded-xl transition-all sticky top-4 z-40 py-3 shadow-md shadow-blue-gray-500/5" fullWidth blurred>
      <div className="flex flex-col-reverse justify-between gap-6 md:flex-row md:items-center">
        <div className="capitalize">
          <Breadcrumbs className="bg-transparent p-0 transition-all mt-1">
            {breadcrumbItems.map((breadcrumb, index) => (
              <Link key={index} to={breadcrumb.path}>
                <Typography variant="small" color="blue-gray" className="font-normal opacity-50 transition-all hover:text-blue-500 hover:opacity-100">
                  {breadcrumb.name}
                </Typography>
              </Link>
            ))}
          </Breadcrumbs>
        </div>
        <div className="flex items-center">
          {/* <div className="relative mr-auto md:mr-4 md:w-56">
            <Input
              label="Search"
              value={searchQuery}
              onChange={handleSearchChange}
              onFocus={() => setShowDropdown(true)}
            />
            {showDropdown && (
              <div ref={dropdownRef} className="absolute z-10 mt-1 w-full rounded-md bg-white shadow-lg">
                <div className="py-1">
                  <button
                    onClick={handleViewAllResults}
                    className="block w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100"
                  >
                    View all results
                  </button>
                </div>
              </div>
            )}
          </div> */}
          <IconButton
            variant="text"
            color="blue-gray"
            className="grid xl:hidden"
            onClick={() => setOpenSidenav(dispatch, !openSidenav)}
          >
            <Bars3Icon strokeWidth={3} className="h-6 w-6 text-blue-gray-500" />
          </IconButton>
          <Link to="/auth/sign-in">
            <Button
              onClick={handleSignOut}
              variant="text"
              color="blue-gray"
              className="hidden items-center gap-1 px-4 xl:flex normal-case"
            >
              <UserCircleIcon className="h-5 w-5 text-blue-gray-500" />
              Sign Out
            </Button>
            <IconButton
              variant="text"
              color="blue-gray"
              className="grid xl:hidden"
            >
              <UserCircleIcon className="h-5 w-5 text-blue-gray-500" />
            </IconButton>
          </Link>
          <Menu>
            <MenuHandler>
              <IconButton variant="text" color="blue-gray">
                <BellIcon className="h-5 w-5 text-blue-gray-500" />
              </IconButton>
            </MenuHandler>
            <MenuList className="w-max border-0">
              <MenuItem className="flex items-center gap-3">
                <Avatar
                  src="https://demos.creative-tim.com/material-dashboard/assets/img/team-2.jpg"
                  alt="item-1"
                  size="sm"
                  variant="circular"
                />
                <div>
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="mb-1 font-normal"
                  >
                    <strong>New message</strong> from Laur
                  </Typography>
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="flex items-center gap-1 text-xs font-normal opacity-60"
                  >
                    <ClockIcon className="h-3.5 w-3.5" /> 13 minutes ago
                  </Typography>
                </div>
              </MenuItem>
              <MenuItem className="flex items-center gap-4">
                <Avatar
                  src="https://demos.creative-tim.com/material-dashboard/assets/img/small-logos/logo-spotify.svg"
                  alt="item-1"
                  size="sm"
                  variant="circular"
                />
                <div>
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="mb-1 font-normal"
                  >
                    <strong>New album</strong> by Travis Scott
                  </Typography>
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="flex items-center gap-1 text-xs font-normal opacity-60"
                  >
                    <ClockIcon className="h-3.5 w-3.5" /> 1 day ago
                  </Typography>
                </div>
              </MenuItem>
              <MenuItem className="flex items-center gap-4">
                <div className="grid h-9 w-9 place-items-center rounded-full bg-gradient-to-tr from-blue-gray-800 to-blue-gray-900">
                  <CreditCardIcon className="h-4 w-4 text-white" />
                </div>
                <div>
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="mb-1 font-normal"
                  >
                    Payment successfully completed
                  </Typography>
                  <Typography
                    variant="small"
                    color="blue-gray"
                    className="flex items-center gap-1 text-xs font-normal opacity-60"
                  >
                    <ClockIcon className="h-3.5 w-3.5" /> 2 days ago
                  </Typography>
                </div>
              </MenuItem>
            </MenuList>
          </Menu>
          <IconButton
            variant="text"
            color="blue-gray"
            onClick={() => setOpenConfigurator(dispatch, true)}
          >
            <Cog6ToothIcon className="h-5 w-5 text-blue-gray-500" />
          </IconButton>
        </div>
      </div>
    </Navbar>
  );
}

DashboardNavbar.displayName = "/src/widgets/layout/dashboard-navbar.jsx";

export default DashboardNavbar;

================
File: widgets/layout/footer.jsx
================
import PropTypes from "prop-types";
import { Typography } from "@material-tailwind/react";
import { HeartIcon } from "@heroicons/react/24/solid";

export function Footer({ brandName, brandLink, routes }) {
  const year = new Date().getFullYear();

  const footerStyle = {
    position: 'fixed',
    bottom: 10,
    width: '100%',
    zIndex: 1000, // Ensure it stays on top of other content
  };

  return (
    <footer style={footerStyle} className="py-2">
      <div className="flex w-full flex-wrap items-center justify-center gap-6 px-2 md:justify-between">
        <Typography variant="small" className="font-normal text-inherit">
          &copy; {year}
          {" "}
          {<b>Syndicate</b>}
        </Typography>
        <ul className="flex items-center gap-4">
          {routes.map(({ name, path }) => (
            <li key={name}>
              <Typography
                as="a"
                href={path}
                target="_blank"
                variant="small"
                className="py-0.5 px-1 font-normal text-inherit transition-colors hover:text-blue-500"
              >
                {name}
              </Typography>
            </li>
          ))}
        </ul>
      </div>
    </footer>
  );
}

Footer.defaultProps = {
  brandName: "Syndicate",
  brandLink: "https://www.creative-tim.com",
  routes: [
    // { name: "hello", path: "https://www.creative-tim.com" },
    // { name: "About Us", path: "https://www.creative-tim.com/presentation" },
    // { name: "Blog", path: "https://www.creative-tim.com/blog" },
    // { name: "License", path: "https://www.creative-tim.com/license" },
  ],
};

Footer.propTypes = {
  brandName: PropTypes.string,
  brandLink: PropTypes.string,
  routes: PropTypes.arrayOf(PropTypes.object),
};

Footer.displayName = "/src/widgets/layout/footer.jsx";

export default Footer;

================
File: widgets/layout/index.js
================
export * from "@/widgets/layout/sidenav";
export * from "@/widgets/layout/dashboard-navbar";
export * from "@/widgets/layout/configurator";
export * from "@/widgets/layout/footer";
export * from "@/widgets/layout/navbar";

================
File: widgets/layout/navbar.jsx
================
import React from "react";
import PropTypes from "prop-types";
import { Link } from "react-router-dom";
import { Navbar as MTNavbar, Collapse, Typography, Button, IconButton, } from "@material-tailwind/react";
import { Bars3Icon, XMarkIcon } from "@heroicons/react/24/outline";

export function Navbar({ brandName, routes, action }) {
  const [openNav, setOpenNav] = React.useState(false);

  React.useEffect(() => {
    window.addEventListener(
      "resize",
      () => window.innerWidth >= 960 && setOpenNav(false)
    );
  }, []);

  const navList = (
    <ul className="mb-4 mt-2 flex flex-col gap-2 lg:mb-0 lg:mt-0 lg:flex-row lg:items-center lg:gap-6">
      {routes.map(({ name, path, icon }) => (
        <Typography
          key={name}
          as="li"
          variant="small"
          color="blue-gray"
          className="capitalize"
        >
          <Link to={path} className="flex items-center gap-1 p-1 font-normal">
            {icon &&
              React.createElement(icon, {
                className: "w-[18px] h-[18px] opacity-50 mr-1",
              })}
            {name}
          </Link>
        </Typography>
      ))}
    </ul>
  );

  return (
    <MTNavbar className="p-3">
      <div className="container mx-auto flex items-center justify-between text-blue-gray-900">
        <Link to="/">
          <Typography
            variant="small"
            className="mr-4 ml-2 cursor-pointer py-1.5 font-bold"
          >
            {brandName}
          </Typography>
        </Link>
        <div className="hidden lg:block">{navList}</div>
        {React.cloneElement(action, {
          className: "hidden lg:inline-block",
        })}
        <IconButton
          variant="text"
          size="sm"
          className="ml-auto text-inherit hover:bg-transparent focus:bg-transparent active:bg-transparent lg:hidden"
          onClick={() => setOpenNav(!openNav)}
        >
          {openNav ? (
            <XMarkIcon strokeWidth={2} className="h-6 w-6" />
          ) : (
            <Bars3Icon strokeWidth={2} className="h-6 w-6" />
          )}
        </IconButton>
      </div>
      <Collapse open={openNav}>
        <div className="container mx-auto">
          {navList}
          {React.cloneElement(action, {
            className: "w-full block lg:hidden",
          })}
        </div>
      </Collapse>
    </MTNavbar>
  );
}

Navbar.defaultProps = {
  brandName: "Syndicate",
  action: (
    <a
      href="https://www.creative-tim.com/product/material-tailwind-dashboard-react"
      target="_blank"
    >
      <Button variant="gradient" size="sm" fullWidth>
        free download
      </Button>
    </a>
  ),
};

Navbar.propTypes = {
  brandName: PropTypes.string,
  routes: PropTypes.arrayOf(PropTypes.object).isRequired,
  action: PropTypes.node,
};

Navbar.displayName = "/src/widgets/layout/navbar.jsx";

export default Navbar;

================
File: widgets/layout/sidenav.jsx
================
import PropTypes from "prop-types";
import { Link, NavLink } from "react-router-dom";
import { XMarkIcon } from "@heroicons/react/24/outline";
import {
  Avatar,
  Button,
  IconButton,
  Typography,
} from "@material-tailwind/react";
import { useMaterialTailwindController, setOpenSidenav } from "@/context";

export function Sidenav({ brandImg, brandName, routes }) {
  const [controller, dispatch] = useMaterialTailwindController();
  const { sidenavColor, sidenavType, openSidenav } = controller;
  const sidenavTypes = {
    dark: "bg-gradient-to-br from-gray-800 to-gray-900",
    white: "bg-white shadow-sm",
    transparent: "bg-transparent",
  };

  return (
    <aside
      className={`${sidenavTypes[sidenavType]} ${
        openSidenav ? "translate-x-0" : "-translate-x-80"
      } fixed inset-0 z-50 my-4 ml-4 h-[calc(100vh-32px)] w-72 rounded-xl transition-transform duration-300 xl:translate-x-0 border border-blue-gray-100`}
    >
      <div
        className={`relative`}
      >
        <Link to="/" className="py-6 px-8 text-center">
          <img
            src="/img/synlogo.jpg"
            alt="Syndicate Logo"
            style={{ width: '70%', height: 'auto', marginLeft: '30px', marginTop: '10px', marginBottom: '-10px' }}
            className="mb-4"
          />
        </Link>
        <IconButton
          variant="text"
          color="white"
          size="sm"
          ripple={false}
          className="absolute right-0 top-0 grid rounded-br-none rounded-tl-none xl:hidden"
          onClick={() => setOpenSidenav(dispatch, false)}
        >
          <XMarkIcon strokeWidth={2.5} className="h-5 w-5 text-white" />
        </IconButton>
      </div>
      <div className="m-4">
        {routes.map(({ layout, title, pages }, key) => (
          <ul key={key} className="mb-4 flex flex-col gap-1">
            {title && (
              <li className="mx-3.5 mt-4 mb-2">
                <Typography
                  variant="small"
                  color={sidenavType === "dark" ? "white" : "blue-gray"}
                  className="font-black uppercase opacity-75"
                >
                  {title}
                </Typography>
              </li>
            )}
            {pages.map(({ icon, name, path }) => (
              <li key={name}>
                <NavLink to={`/${layout}${path}`}
                  className={name === "sign in" || name === "sign up" ? "pointer-events-none" : ""}
                >
                  {({ isActive }) => (
                    <Button
                      variant={isActive ? "gradient" : "text"}
                      color={
                        isActive
                          ? sidenavColor
                          : sidenavType === "dark"
                          ? "white"
                          : "blue-gray"
                      }
                      className={`flex items-center gap-4 px-4 capitalize ${name === "sign in" || name === "sign up" ? "invisible pointer-events-none" : ""
                        }`}
                      fullWidth
                    >
                      {icon}
                      <Typography
                        color="inherit"
                        className="font-medium capitalize"
                      >
                        {name}
                      </Typography>
                    </Button>
                  )}
                </NavLink>
              </li>
            ))}
          </ul>
        ))}
      </div>
    </aside>
  );
}

Sidenav.defaultProps = {
  brandImg: "/img/logo-ct.png",
  brandName: "Syndicate",
};

Sidenav.propTypes = {
  brandImg: PropTypes.string,
  brandName: PropTypes.string,
  routes: PropTypes.arrayOf(PropTypes.object).isRequired,
};

Sidenav.displayName = "/src/widgets/layout/sidenav.jsx";

export default Sidenav;

================
File: App.jsx
================
import { Routes, Route, Navigate } from "react-router-dom";
import { Dashboard, Auth } from "@/layouts";

  function App() {
    return (
      <Routes>
        <Route path="/dashboard/*" element={<Dashboard />}/>  
        <Route path="/auth/*" element={<Auth />} />
        <Route path="*" element={<Navigate to="/dashboard/home" replace />} />
      </Routes>
    );
  }

  export default App;

================
File: main.jsx
================
/**
=========================================================
* Material Tailwind Dashboard React - v2.1.0
=========================================================
*/
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { BrowserRouter } from "react-router-dom";
import { ThemeProvider } from "@material-tailwind/react";
import { MaterialTailwindControllerProvider } from "@/context";
import "../public/css/tailwind.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <BrowserRouter>
      <ThemeProvider>
        <MaterialTailwindControllerProvider>
          <App />
        </MaterialTailwindControllerProvider>
      </ThemeProvider>
    </BrowserRouter>
  </React.StrictMode>
);

================
File: routes.jsx
================
import { HomeIcon, UserCircleIcon, ServerStackIcon, RectangleStackIcon, MagnifyingGlassIcon, UserGroupIcon, MapIcon } from "@heroicons/react/24/solid";
import { Home, Profile, Subscribers, Search, Overview } from "@/pages/dashboard";
import { SignIn, SignUp } from "@/pages/auth";

const icon = {
  className: "w-5 h-5 text-inherit",
};

export const routes = [
  {
    title: "Dashboard",
    layout: "dashboard",
    pages: [
      {
        icon: <HomeIcon {...icon} />,
        name: "home",
        path: "/home",
        element: <Home />,
      },
      {
        icon: <UserCircleIcon {...icon} />,
        name: "profile",
        path: "/profile",
        element: <Profile />,
      },
      {
        icon: <UserGroupIcon {...icon} />,
        name: "subscribers",
        path: "/subscribers",
        element: <Subscribers />,
      },
      {
        icon: <MagnifyingGlassIcon {...icon} />,
        name: "search",
        path: "/search",
        element: <Search />,
      },
    ],
  },
  {
    title: "About",
    layout: "dashboard",
    pages: [
      {
        icon: <MapIcon {...icon} />,
        name: "overview",
        path: "/overview",
        element: <Overview />,
      }
    ],
  },
  {
    // title: "Auth",
    layout: "auth",
    pages: [
      {
        icon: <ServerStackIcon {...icon} />,
        name: "sign in",
        path: "/sign-in",
        element: <SignIn />,
      },
      {
        icon: <RectangleStackIcon {...icon} />,
        name: "sign up",
        path: "/sign-up",
        element: <SignUp />,
      }
    ],
  },
];

export default routes;
